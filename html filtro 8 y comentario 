<script>
  // üîΩ Sustituye por tus datos reales (ahora con columna 8 = comentarios)
  const data = [
    ["FICH001","12345","TXT","3 puertas","F","desc X","C1 100‚Ç¨","Disponible solo en versi√≥n europea"],
    ["FICH002","67890","TXT","3 puertas","F","desc X","C1 200‚Ç¨",""],
    ["FICH003","13579","TXT","3 puertas","G","desc Y","C1 300‚Ç¨","Edici√≥n limitada, incluye kit adicional"],
    ["FICH004","24680","TXT","3 puertas","H","desc Z","C1 400‚Ç¨",""],
    ["FICH005","11223","TXT","7 puertas","A","desc A","C2 500‚Ç¨","Solo bajo pedido"],
    ["FICH006","44556","TXT","7 puertas","A","desc B","C2 600‚Ç¨",""],
    ["FICH007","99887","TXT","7 puertas","B","desc C","C2 700‚Ç¨","Notas t√©cnicas: versi√≥n B actualizada 2024"]
  ];

  const COLS = 7; // n√∫mero de columnas visibles
  const MAX_SUGGESTIONS = 500;
  const DEFAULT_RENDER_LIMIT = 500;
  const inputs = [...document.querySelectorAll('thead input')];
  const filters = Array(COLS).fill('');
  const tbody = document.getElementById('tbody');
  const statusEl = document.getElementById('status');

  function rowMatches(row, ignoreCol = -1){
    for (let i=0;i<COLS;i++){
      if (i===ignoreCol) continue;
      const f = filters[i];
      if (!f) continue;
      const parts = f.split(/\s+/).filter(Boolean);
      const cell = String(row[i]).toLowerCase();
      for (const p of parts) {
        if (p.startsWith('+')) { if (!cell.includes(p.slice(1))) return false; }
        else if (p.startsWith('-')) { if (cell.includes(p.slice(1))) return false; }
        else { if (!cell.includes(p)) return false; }
      }
    }
    return true;
  }

  function highlightText(text, colIndex){
    const f = filters[colIndex];
    if (!f) return text;
    let result = text;
    const parts = f.split(/\s+/).filter(Boolean).filter(p => !p.startsWith('-'));
    for (const p of parts) {
      const term = p.startsWith('+') ? p.slice(1) : p;
      if (!term) continue;
      const regex = new RegExp(`(${term.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
      result = result.replace(regex, '<mark>$1</mark>');
    }
    return result;
  }

  function toggleCommentRow(tr, commentText) {
    const next = tr.nextElementSibling;
    if (next && next.classList.contains('comment-row')) {
      next.remove();
      return;
    }
    const td = document.createElement('td');
    td.colSpan = COLS;
    td.innerHTML = `<div style="padding:8px;color:#444;background:#f9f9f9;border-top:1px solid #ddd;font-size:13px;">
                      üí¨ ${commentText}
                    </div>`;
    const commentTr = document.createElement('tr');
    commentTr.className = 'comment-row';
    commentTr.appendChild(td);
    tr.insertAdjacentElement('afterend', commentTr);
  }

  function renderTable(){
    const matchedRows = [];
    for (const row of data) if (rowMatches(row)) matchedRows.push(row);
    const matched = matchedRows.length;
    const activeFilters = filters.some(f => f.trim() !== '');
    const renderLimit = (activeFilters && matched > DEFAULT_RENDER_LIMIT) ? matched : DEFAULT_RENDER_LIMIT;

    const frag = document.createDocumentFragment();
    for (const row of matchedRows.slice(0, renderLimit)) {
      const tr = document.createElement('tr');
      for (let c=0;c<COLS;c++){
        const td = document.createElement('td');
        td.innerHTML = highlightText(String(row[c]), c);
        tr.appendChild(td);
      }
      const comment = row[COLS] || "";
      if (comment.trim() !== "") {
        tr.style.cursor = 'pointer';
        tr.title = "Ver comentario";
        tr.addEventListener('click', () => toggleCommentRow(tr, comment));
      }
      frag.appendChild(tr);
    }

    tbody.innerHTML = '';
    tbody.appendChild(frag);
    statusEl.textContent = `Coincidencias: ${matched.toLocaleString()} ‚Äî Mostrando: ${Math.min(matched, renderLimit).toLocaleString()}${matched>renderLimit?' (limitado por rendimiento)':''}`;
  }

  function updateDatalist(colIndex, typed){
    const dl = document.getElementById('dl'+colIndex);
    dl.innerHTML = '';
    const counts = new Map();
    for (const row of data){
      if (rowMatches(row, colIndex)){
        const val = String(row[colIndex]);
        counts.set(val, (counts.get(val) || 0) + 1);
      }
    }
    const options = Array.from(counts.entries()).sort((a,b)=>a[0].localeCompare(b[0]));
    const t = (typed||'').toLowerCase();
    let count = 0;
    for (const [val, n] of options){
      if (!typed || val.toLowerCase().includes(t)){
        const opt = document.createElement('option');
        opt.value = val;
        opt.label = `${val} (${n})`;
        dl.appendChild(opt);
        if (++count >= MAX_SUGGESTIONS) break;
      }
    }
  }

  function updateAllDatalists(except = -1){
    for (let i=0;i<COLS;i++) if (i!==except) updateDatalist(i, inputs[i].value);
  }

  function handleType(colIndex, el){
    const val = (el.value || '').trim();
    filters[colIndex] = val.toLowerCase();
    if (val) el.classList.add('active'); else el.classList.remove('active');
    updateDatalist(colIndex, val);
    updateAllDatalists(colIndex);
    renderTable();
  }

  function clearAllFilters(){
    for (let i=0;i<COLS;i++){
      filters[i]=''; inputs[i].value=''; inputs[i].classList.remove('active');
      document.getElementById('dl'+i).innerHTML='';
    }
    renderTable();
    updateAllDatalists();
  }

  // Inicial
  renderTable();
  updateAllDatalists();

  // üëá Hack para desplegable al enfocar
  inputs.forEach(inp => {
    inp.addEventListener('focus', () => {
      if (inp.value === '') {
        inp.setAttribute('placeholder', ' ');
        setTimeout(()=>inp.setAttribute('placeholder',''),0);
      }
    });
  });
</script>