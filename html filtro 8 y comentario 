<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Tabla filtrable + Comentarios subrayados</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    :root {
      --bg:#f4f7fa;
      --ink:#1d1f21;
      --muted:#666;
      --line:#d5d9de;
      --head:#0057d9;
      --headInk:#fff;
      --active:#0057d9;
      --comment-mark:#0070f3;
      --comment-border:#0070f3;
      --comment-bg:#f7faff;
    }
    body {
      font-family: "Segoe UI", Roboto, sans-serif;
      margin: 24px;
      color: var(--ink);
      background: var(--bg);
    }
    h2 {
      font-size: 22px;
      margin-bottom: 5px;
      color: #09316c;
    }
    .meta {
      font-size: 13px;
      color: var(--muted);
      margin: 6px 0 18px;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      background: #fff;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 2px 8px rgba(0,0,0,.08);
    }
    th, td {
      padding: 9px 10px;
      border-bottom: 1px solid var(--line);
      text-align: left;
      vertical-align: top;
      font-size: 14px;
    }
    thead th {
      background: var(--head);
      color: var(--headInk);
      position: sticky;
      top: 44px;
      z-index: 1;
    }
    thead tr:first-child th {
      background: #fff;
      color: var(--ink);
      position: sticky;
      top: 0;
      z-index: 2;
    }
    thead input {
      width: 100%;
      box-sizing: border-box;
      padding: 6px 8px;
      border: 1px solid var(--line);
      border-radius: 5px;
      outline: none;
      transition: box-shadow .15s, border-color .15s;
    }
    thead input:focus {
      border-color: var(--active);
      box-shadow: 0 0 0 3px rgba(11,110,253,.15);
    }
    thead input.active {
      color: var(--active);
      font-weight: 600;
    }
    tbody tr:nth-child(even) td { background: #fafbfc; }
    mark { background: none; color: var(--active); font-weight: 700; }

    /* â€”â€”â€” filas con comentario â€”â€”â€” */
    tbody tr.has-comment td {
      border-left: 3px solid var(--comment-mark);
      background: #ffffff;
    }
    tbody tr.has-comment td:nth-child(4) {
      text-decoration: underline;
      text-decoration-color: var(--comment-mark);
      text-underline-offset: 3px;
    }

    /* â€”â€”â€” comentario expandido â€”â€”â€” */
    .comment-row td {
      background: var(--comment-bg);
      border-left: 3px solid var(--comment-border);
      font-size: 13px;
      color: #334;
      animation: fadeIn .25s ease;
    }
    .comment-row div {
      padding: 8px 10px;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-3px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .actions { margin-bottom: 12px; }
    .actions button {
      padding: 7px 12px;
      border: 1px solid var(--active);
      background: var(--active);
      color: #fff;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      transition: background .2s;
    }
    .actions button:hover { background: #094db1; }
    .status {
      font-size: 12px;
      color: var(--muted);
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <h2>Tabla filtrable con comentarios subrayados</h2>
  <div class="meta">
    âž• Usa <b>+palabra</b> para buscar exacto, <b>-palabra</b> para excluir.<br>
    ðŸ’¬ Las filas con descripciÃ³n subrayada tienen comentario. Haz clic para ver el detalle.
  </div>

  <div class="actions">
    <button onclick="clearAllFilters()">ðŸ§¼ Borrar todos los filtros</button>
  </div>

  <table>
    <thead>
      <tr>
        <th><input id="f0" list="dl0" placeholder="Fichero" oninput="handleType(0,this)"><datalist id="dl0"></datalist></th>
        <th><input id="f1" list="dl1" placeholder="CÃ³digo" oninput="handleType(1,this)"><datalist id="dl1"></datalist></th>
        <th><input id="f2" list="dl2" placeholder="Formato" oninput="handleType(2,this)"><datalist id="dl2"></datalist></th>
        <th><input id="f3" list="dl3" placeholder="DescripciÃ³n" oninput="handleType(3,this)"><datalist id="dl3"></datalist></th>
        <th><input id="f4" list="dl4" placeholder="CapÃ­tulo" oninput="handleType(4,this)"><datalist id="dl4"></datalist></th>
        <th><input id="f5" list="dl5" placeholder="DescripciÃ³n 2" oninput="handleType(5,this)"><datalist id="dl5"></datalist></th>
        <th><input id="f6" list="dl6" placeholder="C EURO" oninput="handleType(6,this)"><datalist id="dl6"></datalist></th>
      </tr>
      <tr>
        <th>Fichero</th><th>CÃ³digo</th><th>Formato</th><th>DescripciÃ³n</th>
        <th>CapÃ­tulo</th><th>DescripciÃ³n 2</th><th>C EURO</th>
      </tr>
    </thead>
    <tbody id="tbody"></tbody>
  </table>

  <div class="status" id="status"></div>

  <script>
    const data = [
      ["FICH001","12345","TXT","3 puertas","F","desc X","C1 100â‚¬","Disponible solo en versiÃ³n europea"],
      ["FICH002","67890","TXT","3 puertas","F","desc X","C1 200â‚¬",""],
      ["FICH003","13579","TXT","3 puertas","G","desc Y","C1 300â‚¬","EdiciÃ³n limitada, incluye kit adicional"],
      ["FICH004","24680","TXT","3 puertas","H","desc Z","C1 400â‚¬",""],
      ["FICH005","11223","TXT","7 puertas","A","desc A","C2 500â‚¬","Solo bajo pedido"],
      ["FICH006","44556","TXT","7 puertas","A","desc B","C2 600â‚¬",""],
      ["FICH007","99887","TXT","7 puertas","B","desc C","C2 700â‚¬","Notas tÃ©cnicas: versiÃ³n B actualizada 2024"]
    ];

    const COLS = 7;
    const inputs = [...document.querySelectorAll('thead input')];
    const filters = Array(COLS).fill('');
    const tbody = document.getElementById('tbody');
    const statusEl = document.getElementById('status');
    const MAX_SUGGESTIONS = 500;

    function rowMatches(row, ignoreCol=-1){
      for(let i=0;i<COLS;i++){
        if(i===ignoreCol) continue;
        const f=filters[i]; if(!f) continue;
        const parts=f.split(/\s+/).filter(Boolean);
        const cell=String(row[i]).toLowerCase();
        for(const p of parts){
          if(p.startsWith('+')){ if(!cell.includes(p.slice(1))) return false; }
          else if(p.startsWith('-')){ if(cell.includes(p.slice(1))) return false; }
          else if(!cell.includes(p)) return false;
        }
      }
      return true;
    }

    function highlightText(text,col){
      const f=filters[col]; if(!f) return text;
      let result=text;
      const parts=f.split(/\s+/).filter(Boolean).filter(p=>!p.startsWith('-'));
      for(const p of parts){
        const term=p.startsWith('+')?p.slice(1):p;
        if(!term) continue;
        const re=new RegExp(`(${term.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")})`,"gi");
        result=result.replace(re,"<mark>$1</mark>");
      }
      return result;
    }

    function toggleCommentRow(tr,txt){
      const next=tr.nextElementSibling;
      if(next && next.classList.contains("comment-row")){ next.remove(); return; }
      const td=document.createElement("td");
      td.colSpan=COLS;
      td.innerHTML=`<div>ðŸ’¬ ${txt}</div>`;
      const row=document.createElement("tr");
      row.className="comment-row";
      row.appendChild(td);
      tr.insertAdjacentElement("afterend",row);
    }

    function renderTable(){
      const matched=data.filter(r=>rowMatches(r));
      const matchedCount=matched.length;
      const frag=document.createDocumentFragment();
      for(const row of matched){
        const tr=document.createElement("tr");
        const comment=row[COLS]||"";
        if(comment.trim()!=="") tr.classList.add("has-comment");
        for(let c=0;c<COLS;c++){
          const td=document.createElement("td");
          td.innerHTML=highlightText(String(row[c]),c);
          tr.appendChild(td);
        }
        if(comment.trim()!=="")
          tr.addEventListener("click",()=>toggleCommentRow(tr,comment));
        frag.appendChild(tr);
      }
      tbody.innerHTML="";
      tbody.appendChild(frag);
      statusEl.textContent=`Coincidencias: ${matchedCount}`;
    }

    function updateDatalist(col,typed){
      const dl=document.getElementById("dl"+col);
      dl.innerHTML="";
      const counts=new Map();
      for(const row of data){
        if(rowMatches(row,col)){
          const val=String(row[col]);
          counts.set(val,(counts.get(val)||0)+1);
        }
      }
      const options=Array.from(counts.entries()).sort((a,b)=>a[0].localeCompare(b[0]));
      const t=(typed||"").toLowerCase();
      let count=0;
      for(const [val,n] of options){
        if(!typed||val.toLowerCase().includes(t)){
          const opt=document.createElement("option");
          opt.value=val; opt.label=`${val} (${n})`;
          dl.appendChild(opt);
          if(++count>=MAX_SUGGESTIONS) break;
        }
      }
    }

    function updateAllDatalists(except=-1){
      for(let i=0;i<COLS;i++) if(i!==except) updateDatalist(i,inputs[i].value);
    }

    function handleType(col,el){
      const val=(el.value||"").trim();
      filters[col]=val.toLowerCase();
      if(val) el.classList.add("active"); else el.classList.remove("active");
      updateDatalist(col,val); updateAllDatalists(col); renderTable();
    }

    function clearAllFilters(){
      for(let i=0;i<COLS;i++){
        filters[i]=""; inputs[i].value=""; inputs[i].classList.remove("active");
        document.getElementById("dl"+i).innerHTML="";
      }
      renderTable(); updateAllDatalists();
    }

    renderTable(); updateAllDatalists();
  </script>
</body>
</html>