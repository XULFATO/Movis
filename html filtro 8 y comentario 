Sub FusionarVR()
    ' ========= CONFIGURA RUTAS =========
    Dim INPUT_HTML As String
    Dim INPUT_JSON As String
    Dim OUTPUT_HTML As String
    Dim DROP_4TH_COL As Boolean

    INPUT_HTML = "C:\RUTA\A\TU\tabla_800.htm"         ' tabla original (800 filas)
    INPUT_JSON = "C:\RUTA\A\TU\comentarios.json"      ' JSON con {file, elemento, comentario}
    OUTPUT_HTML = "C:\RUTA\A\TU\fusion_final.html"    ' salida
    DROP_4TH_COL = True                               ' True = elimina la 4ª columna
    ' ===================================

    Dim fso As Object, html As String, json As String
    Dim dict As Object
    Dim reJson As Object, reRows As Object, reTd As Object, reTh As Object, reTags As Object
    Dim m As Object, matches As Object
    Dim outHtml As String
    Dim headers() As String, colCount As Long
    Dim rows As Object, r As Object, tds() As String
    Dim i As Long, j As Long
    Dim tabla As String, codElem As String, hasHref As Boolean, key As String, comment As String
    Dim tmp As String

    Set fso = CreateObject("Scripting.FileSystemObject")
    If Not fso.FileExists(INPUT_HTML) Then MsgBox "No existe HTML: " & INPUT_HTML: Exit Sub
    If Not fso.FileExists(INPUT_JSON) Then MsgBox "No existe JSON: " & INPUT_JSON: Exit Sub

    html = fso.OpenTextFile(INPUT_HTML, 1, False).ReadAll
    json = fso.OpenTextFile(INPUT_JSON, 1, False).ReadAll

    ' ---- Diccionario comentarios: clave = UCase(file+elemento) ----
    Set dict = CreateObject("Scripting.Dictionary")
    dict.CompareMode = 1

    Set reJson = CreateObject("VBScript.RegExp")
    With reJson
        .IgnoreCase = True
        .Global = True
        .Pattern = """file""\s*:\s*""([^""]+)""[^}]*?""elemento""\s*:\s*""([^""]*)""[^}]*?""comentario""\s*:\s*""([^""]*)"""
    End With
    Set matches = reJson.Execute(json)
    For Each m In matches
        Dim fileName As String, elemento As String, comentario As String, k As String

        fileName = m.SubMatches(0)
        elemento = m.SubMatches(1)
        comentario = m.SubMatches(2)

        ' --- decodificación mínima de entidades / espacios ---
        ' (fileName y elemento solo limpieza ligera)
        fileName = Replace(fileName, "&nbsp;", " ")
        fileName = Replace(fileName, vbCr, " ")
        fileName = Replace(fileName, vbLf, " ")
        Do While InStr(fileName, "  ") > 0: fileName = Replace(fileName, "  ", " "): Loop
        elemento = Replace(elemento, "&nbsp;", " ")
        elemento = Replace(elemento, vbCr, " ")
        elemento = Replace(elemento, vbLf, " ")
        Do While InStr(elemento, "  ") > 0: elemento = Replace(elemento, "  ", " "): Loop

        ' Comentario: decodificar lo típico
        comentario = Replace(comentario, "&nbsp;", " ")
        comentario = Replace(comentario, "&quot;", """")
        comentario = Replace(comentario, "&amp;", "&")
        comentario = Replace(comentario, "&lt;", "<")
        comentario = Replace(comentario, "&gt;", ">")
        comentario = Replace(comentario, "&aacute;", "á")
        comentario = Replace(comentario, "&eacute;", "é")
        comentario = Replace(comentario, "&iacute;", "í")
        comentario = Replace(comentario, "&oacute;", "ó")
        comentario = Replace(comentario, "&uacute;", "ú")
        comentario = Replace(comentario, "&ntilde;", "ñ")
        comentario = Replace(comentario, "&#225;", "á")
        comentario = Replace(comentario, "&#233;", "é")
        comentario = Replace(comentario, "&#237;", "í")
        comentario = Replace(comentario, "&#243;", "ó")
        comentario = Replace(comentario, "&#250;", "ú")
        comentario = Replace(comentario, "&#241;", "ñ")

        k = UCase(fileName & elemento)
        If Not dict.Exists(k) Then dict.Add k, comentario
    Next

    ' ---- Regex auxiliares para HTML ----
    Set reTh = CreateObject("VBScript.RegExp")
    With reTh: .IgnoreCase = True: .Global = True: .Pattern = "<th[^>]*>([\s\S]*?)</th>": End With

    Set reRows = CreateObject("VBScript.RegExp")
    With reRows: .IgnoreCase = True: .Global = True: .Pattern = "<tr[^>]*>([\s\S]*?)</tr>": End With

    Set reTd = CreateObject("VBScript.RegExp")
    With reTd: .IgnoreCase = True: .Global = True: .Pattern = "<td[^>]*>([\s\S]*?)</td>": End With

    Set reTags = CreateObject("VBScript.RegExp")
    With reTags: .IgnoreCase = True: .Global = True: .Pattern = "<[^>]+>": End With

    ' ---- Cabeceras ----
    Set matches = reTh.Execute(html)
    If matches.Count > 0 Then
        ReDim headers(matches.Count - 1)
        For i = 0 To matches.Count - 1
            tmp = matches(i).SubMatches(0)
            tmp = reTags.Replace(tmp, " ")
            tmp = Trim(tmp)
            headers(i) = tmp
        Next
        colCount = matches.Count
    Else
        colCount = 7
        ReDim headers(colCount - 1)
        For i = 0 To colCount - 1: headers(i) = "Col" & (i + 1): Next
    End If

    ' ---- Inicio HTML salida ----
    outHtml = ""
    outHtml = outHtml & "<!doctype html><html><head><meta charset='utf-8'>"
    outHtml = outHtml & "<title>Fusión de tablas HTM</title>"
    outHtml = outHtml & "<style>body{font-family:Segoe UI,Arial,sans-serif;margin:24px}"
    outHtml = outHtml & "table{width:100%;border-collapse:collapse}"
    outHtml = outHtml & "th,td{border:1px solid #ddd;padding:6px 8px}"
    outHtml = outHtml & "th{background:#f3f6fa;text-align:left}"
    outHtml = outHtml & "tbody tr:nth-child(odd){background:#fafafa}"
    outHtml = outHtml & ".center{text-align:center}</style></head><body>"
    outHtml = outHtml & "<h1>Fusión de tablas HTM</h1><table><thead><tr>"

    For i = 0 To colCount - 1
        If Not (DROP_4TH_COL And i = 3) Then
            outHtml = outHtml & "<th>" & HTMLEncode(headers(i)) & "</th>"
        End If
    Next
    outHtml = outHtml & "<th class='center'>TieneComentario</th><th>Comentario</th></tr></thead><tbody>"

    ' ---- Filas ----
    Set rows = reRows.Execute(html)
    For Each r In rows
        ' celdas
        Set matches = reTd.Execute(CStr(r))
        If matches.Count > 0 Then
            ReDim tds(matches.Count - 1)
            For i = 0 To matches.Count - 1
                tds(i) = matches(i).SubMatches(0)
            Next

            ' columna 1 = tabla
            tmp = tds(0)
            tabla = Trim(reTags.Replace(tmp, " "))

            ' columna 2 = cod elemento (puede tener <a>)
            hasHref = (InStr(1, tds(1), "<a ", vbTextCompare) > 0)
            tmp = tds(1)
            codElem = Trim(reTags.Replace(tmp, " "))

            key = UCase(tabla & codElem)
            If dict.Exists(key) Then
                comment = dict(key)
            Else
                comment = ""
            End If

            outHtml = outHtml & "<tr>"
            For j = 0 To UBound(tds)
                If Not (DROP_4TH_COL And j = 3) Then
                    tmp = Trim(reTags.Replace(tds(j), " "))
                    outHtml = outHtml & "<td>"
                    If j = 1 Then
                        outHtml = outHtml & HTMLEncode(codElem)
                    Else
                        outHtml = outHtml & HTMLEncode(tmp)
                    End If
                    outHtml = outHtml & "</td>"
                End If
            Next

            If hasHref And Len(comment) > 0 Then
                outHtml = outHtml & "<td class='center'>S</td>"
            Else
                outHtml = outHtml & "<td class='center'>N</td>"
            End If
            outHtml = outHtml & "<td>" & HTMLEncode(comment) & "</td></tr>"
        End If
    Next

    outHtml = outHtml & "</tbody></table></body></html>"

    ' ---- Guardar ----
    Dim tf
    Set tf = fso.CreateTextFile(OUTPUT_HTML, True, True)
    tf.Write outHtml
    tf.Close

    On Error Resume Next
    MsgBox "Generado: " & OUTPUT_HTML
End Sub

' ---- Mini HTMLEncode inline (sin helpers externos) ----
Private Function HTMLEncode(ByVal s As String) As String
    s = Replace(s, "&", "&amp;")
    s = Replace(s, "<", "&lt;")
    s = Replace(s, ">", "&gt;")
    s = Replace(s, """", "&quot;")
    HTMLEncode = s
End Function