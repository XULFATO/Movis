# ===========================================
# Buscar-Blueprints.ps1 (versi√≥n estable)
# ===========================================

$ErrorActionPreference = 'Stop'

function Ask-YesNo($prompt) {
    while ($true) {
        $r = Read-Host "$prompt (S/N)"
        if ($r -match '^[sS]$') { return $true }
        if ($r -match '^[nN]$') { return $false }
    }
}

Write-Host "üîç B√∫squeda de literales en hoja 'An√°lisis Conceptos' de ficheros 'Blueprint'..." -ForegroundColor Cyan

# Ruta base
$basePath = Read-Host "üìÇ Introduce la ruta base (p.ej. R:\Proyectos)"
if (-not (Test-Path $basePath)) {
    Write-Host "‚ùå La ruta no existe: $basePath" -ForegroundColor Red
    exit 1
}

# Nombre exacto de la hoja
$sheetName = "An√°lisis Conceptos"

# Literales (hasta 10)
Write-Host "`nIntroduce hasta 10 literales (pueden tener varias palabras, uno por l√≠nea). Deja vac√≠o para terminar." -ForegroundColor Yellow
$literals = @()
for ($i=1; $i -le 10; $i++) {
    $lit = Read-Host ("Literal #{0}" -f $i)
    if ([string]::IsNullOrWhiteSpace($lit)) { break }
    $literals += $lit
}
if ($literals.Count -eq 0) {
    Write-Host "‚ùå No se introdujo ning√∫n literal." -ForegroundColor Red
    exit 1
}

# ¬øParar en la primera coincidencia global?
$stopAtFirst = Ask-YesNo "¬øParar al encontrar la primera coincidencia?"

# ===========================================
# PATRONES FLEXIBLES DE CARPETAS
# ===========================================
$regexDocImpl = '(?i)(^\s*\d{0,3}\s*[-_. ]*\s*documentaci[o√≥]n\s+implantaci[o√≥]n\b)|(\bdocumentaci[o√≥]n\s+implantaci[o√≥]n\b)'
$regexAnalisis = '(?i)(^\s*\d{0,3}\s*[-_. ]*\s*an[a√°]lisis\b)|(\ban[a√°]lisis\b)'

# ===========================================
# RECORRER ESTRUCTURA (versi√≥n buena anterior)
# ===========================================
Write-Host "`nüìÅ Recorriendo estructura (con '_' en 4¬™ posici√≥n, Doc. Implantaci√≥n/An√°lisis, orden descendente por fecha)..." -ForegroundColor DarkCyan

$files = @()

Get-ChildItem -Path $basePath -Directory |
    Where-Object { $_.Name.Length -ge 4 -and $_.Name[3] -eq '_' } |
    Sort-Object LastWriteTime -Descending |
    ForEach-Object {

    $nivel1 = $_.FullName
    Write-Host ("‚Üí Revisando carpeta principal: {0}" -f $_.Name) -ForegroundColor Yellow

    # Subcarpetas de segundo nivel
    Get-ChildItem -Path $nivel1 -Directory -ErrorAction SilentlyContinue | ForEach-Object {
        $nivel2 = $_.FullName

        # Carpeta "Documentaci√≥n Implantaci√≥n"
        $docImplDirs = Get-ChildItem -Path $nivel2 -Directory -ErrorAction SilentlyContinue | Where-Object {
            $_.Name -match $regexDocImpl
        }

        foreach ($docDir in $docImplDirs) {
            # Carpeta "An√°lisis"
            $analisisDirs = Get-ChildItem -Path $docDir.FullName -Directory -ErrorAction SilentlyContinue | Where-Object {
                $_.Name -match $regexAnalisis
            }

            foreach ($anaDir in $analisisDirs) {
                Write-Host ("   üìÇ Revisando subcarpeta: {0}" -f $anaDir.FullName) -ForegroundColor Cyan

                # Buscar ficheros Blueprint (versi√≥n que funcionaba)
                $found = Get-ChildItem -Path $anaDir.FullName -File -Filter '*Blueprint*.xls*' -ErrorAction SilentlyContinue |
                         Where-Object { $_.Name -notlike '~$*' }

                if ($found) {
                    foreach ($f in $found) {
                        Write-Host ("      ‚úÖ Encontrado Blueprint: {0}" -f $f.Name) -ForegroundColor Green
                    }
                    $files += $found
                }
            }
        }
    }
}

if ($files.Count -eq 0) {
    Write-Host "‚ö†Ô∏è No se encontraron ficheros 'Blueprint' en la estructura esperada." -ForegroundColor DarkYellow
    exit 0
}

Write-Host ("   ‚Üí {0} ficheros 'Blueprint' detectados." -f $files.Count) -ForegroundColor Green

# ===========================================
# B√öSQUEDA EN EXCEL (modificada para funcionar bien)
# ===========================================

$excel = $null
try {
    $excel = New-Object -ComObject Excel.Application
    $excel.Visible = $false
    $excel.DisplayAlerts = $false

    $prevCalc = $excel.Calculation
    $prevScreen = $excel.ScreenUpdating
    $excel.ScreenUpdating = $false
    $excel.Calculation = -4135 # xlCalculationManual

    $results = New-Object System.Collections.Generic.List[object]

    foreach ($file in $files) {
        foreach ($lit in $literals) {
            $wb = $null
            try {
                # Abrir en solo lectura
                $wb = $excel.Workbooks.Open($file.FullName, 0, $true)
                $sheet = $null
                foreach ($sh in $wb.Worksheets) {
                    if ($sh.Name -eq $sheetName) { $sheet = $sh; break }
                }
                if (-not $sheet) { continue }

                # Rango usado
                $used = $sheet.UsedRange
                $rows = $used.Rows.Count
                $cols = $used.Columns.Count

                for ($r=1; $r -le $rows; $r++) {
                    for ($c=1; $c -le $cols; $c++) {
                        $val = $used.Cells.Item($r,$c).Text
                        if ([string]::IsNullOrWhiteSpace($val)) { continue }

                        $valNorm = ($val -replace '\s+', ' ').Trim()
                        $litNorm = ($lit -replace '\s+', ' ').Trim()

                        if ($valNorm -imatch [regex]::Escape($litNorm)) {
                            $tipo = if ($valNorm -ieq $litNorm) { "Exacta" } else { "Parcial" }
                            $results.Add([PSCustomObject]@{
                                Fichero = $file.FullName
                                Hoja    = $sheetName
                                Literal = $lit
                                Celda   = "$r,$c"
                                Tipo    = $tipo
                            })
                            Write-Host "‚úÖ [$lit] en $($file.Name) celda $r,$c ($tipo)" -ForegroundColor Green
                            if ($stopAtFirst) { throw "STOP_GLOBAL" }
                        }
                    }
                }

            } catch {
                if ($_.Exception.Message -eq "STOP_GLOBAL") { throw }
                Write-Host ("‚ö†Ô∏è Error con {0}" -f $file.FullName) -ForegroundColor DarkYellow
            } finally {
                if ($wb) { $wb.Close($false) | Out-Null }
            }
        }
    }

    # Crear Excel de resultados
    $outPath = Join-Path $env:USERPROFILE "Desktop\Resultados_Blueprint.xlsx"
    $wbOut = $excel.Workbooks.Add()
    $wsOut = $wbOut.Sheets.Item(1)
    $wsOut.Name = "Resultados"
    $wsOut.Cells.Item(1,1)="Fichero"
    $wsOut.Cells.Item(1,2)="Hoja"
    $wsOut.Cells.Item(1,3)="Literal"
    $wsOut.Cells.Item(1,4)="Celda"
    $wsOut.Cells.Item(1,5)="Tipo coincidencia"
    $row=2
    foreach($r in $results){
        $wsOut.Cells.Item($row,1)=$r.Fichero
        $wsOut.Cells.Item($row,2)=$r.Hoja
        $wsOut.Cells.Item($row,3)=$r.Literal
        $wsOut.Cells.Item($row,4)=$r.Celda
        $wsOut.Cells.Item($row,5)=$r.Tipo
        $row++
    }
    $wsOut.Range("A1:E$($row-1)").EntireColumn.AutoFit()|Out-Null
    $wbOut.SaveAs($outPath)
    $wbOut.Close($false)

    Write-Host "`n‚úÖ Terminado. Resultados en: $outPath" -ForegroundColor Cyan

} finally {
    if ($excel) {
        $excel.Quit()
        [System.Runtime.InteropServices.Marshal]::ReleaseComObject($excel)|Out-Null
    }
}