# ==========================================================
# Buscar literales en Blueprints (versi√≥n funcional optimizada)
# ==========================================================
$ErrorActionPreference = "Stop"

# ---------- Limpieza de procesos previos ----------
Get-Process excel -ErrorAction SilentlyContinue | ForEach-Object { try { $_.Kill() } catch {} }

# ---------- Utilidades ----------
function Remove-Diacritics([string]$s){
    if ([string]::IsNullOrWhiteSpace($s)) { return "" }
    $d = $s.Normalize([Text.NormalizationForm]::FormD)
    ($d.ToCharArray() | Where-Object {
        [Globalization.CharUnicodeInfo]::GetUnicodeCategory($_) -ne [Globalization.UnicodeCategory]::NonSpacingMark
    }) -join ''
}
function Normalize([string]$s){ (Remove-Diacritics $s).ToLowerInvariant().Trim() }

function Ask-YesNo($prompt) {
    while ($true) {
        $r = Read-Host "$prompt (S/N)"
        if ($r -match '^[sS]$') { return $true }
        if ($r -match '^[nN]$') { return $false }
        Write-Host "   Responde S o N, por favor." -ForegroundColor DarkYellow
    }
}

# ---------- Entrada ----------
Write-Host "üîç B√∫squeda de literales en Blueprints ‚Üí hoja 'An√°lisis conceptos' (Excel optimizado)" -ForegroundColor Cyan

$basePath = Read-Host "üìÇ Introduce la ruta base (p.ej. R:\Proyectos)"
if (-not (Test-Path $basePath)) { Write-Host "‚ùå Ruta no v√°lida."; exit }

Write-Host "`n‚úèÔ∏è  Introduce hasta 10 literales (uno por l√≠nea). Deja vac√≠o para terminar." -ForegroundColor Yellow
$literals = @()
for ($i=1; $i -le 10; $i++){
    $lit = Read-Host ("Literal #{0}" -f $i)
    if ([string]::IsNullOrWhiteSpace($lit)) { break }
    $literals += $lit
}
if ($literals.Count -eq 0) { Write-Host "‚ùå Sin literales. Saliendo."; exit }

$stopAtFirst = Ask-YesNo "¬øParar al encontrar la primera coincidencia?"

$reDoc = '(?i)(documentaci[o√≥]n\s+implantaci[o√≥]n)'
$reAna = '(?i)(an[a√°]lisis)'

# ---------- Recorrido ----------
Write-Host "`nüìÅ Recorriendo estructura (con '_' en 4¬™ posici√≥n, orden fecha desc.)..." -ForegroundColor DarkCyan

$blueprints = @()

Get-ChildItem -Path $basePath -Directory |
  Where-Object { $_.Name.Length -ge 4 -and $_.Name[3] -eq '_' } |
  Sort-Object LastWriteTime -Descending |
  ForEach-Object {

    $dir1 = $_
    Write-Host ("‚Üí Revisando carpeta principal: {0}" -f $dir1.Name) -ForegroundColor Yellow

    Get-ChildItem -Path $dir1.FullName -Directory -ErrorAction SilentlyContinue | ForEach-Object {
        $dir2 = $_
        $docDirs = Get-ChildItem -Path $dir2.FullName -Directory -ErrorAction SilentlyContinue |
                   Where-Object { $_.Name -match $reDoc }

        foreach ($doc in $docDirs) {
            $anaDirs = Get-ChildItem -Path $doc.FullName -Directory -ErrorAction SilentlyContinue |
                       Where-Object { $_.Name -match $reAna }

            foreach ($ana in $anaDirs) {
                Write-Host ("   üìÇ Revisando subcarpeta: {0}" -f $ana.FullName) -ForegroundColor Cyan

                $found = Get-ChildItem -Path $ana.FullName -File -ErrorAction SilentlyContinue |
                         Where-Object { $_.Name -notlike '~$*' -and $_.Name -match '(?i)Blueprint.*\.(xlsx|xlsm)$' }

                foreach ($f in $found) {
                    Write-Host ("      ‚úÖ Encontrado Blueprint: {0}" -f $f.Name) -ForegroundColor Green
                    $blueprints += $f.FullName
                }
            }
        }
    }
}

if ($blueprints.Count -eq 0) {
    Write-Host "‚ö†Ô∏è No se encontraron Blueprints en la estructura esperada." -ForegroundColor DarkYellow
    exit
}

Write-Host ("   ‚Üí {0} ficheros 'Blueprint' detectados." -f $blueprints.Count) -ForegroundColor Green

# ---------- B√∫squeda en Excel optimizada ----------
$excel = New-Object -ComObject Excel.Application
$excel.Visible = $false
$excel.DisplayAlerts = $false
$excel.AutomationSecurity = 3  # sin macros
$excel.EnableEvents = $false

$results = @()

foreach ($path in $blueprints) {
    try {
        Write-Host ("      ‚è≥ Abriendo: {0}" -f $path) -ForegroundColor DarkGray
        $wb = $excel.Workbooks.Open($path, 0, $true)
        $target = $null
        foreach ($sh in $wb.Worksheets) {
            $n = Normalize $sh.Name
            if ($n -match 'analisis' -and $n -match 'concept') { $target = $sh; break }
        }
        if (-not $target) {
            Write-Host ("‚ö†Ô∏è Sin hoja 'An√°lisis conceptos' en {0}" -f (Split-Path $path -Leaf)) -ForegroundColor DarkYellow
            $wb.Close($false) | Out-Null
            continue
        }

        Write-Host ("      üîç Buscando en hoja '{0}'..." -f $target.Name) -ForegroundColor Gray

        # Extraer todos los valores a memoria (rapid√≠simo)
        $values = $target.UsedRange.Value2
        if (-not $values) {
            Write-Host "‚ö™ Hoja vac√≠a." -ForegroundColor DarkGray
            $wb.Close($false) | Out-Null
            continue
        }

        $rows = $values.GetLength(0)
        $cols = $values.GetLength(1)

        for ($r=1; $r -le $rows; $r++) {
            for ($c=1; $c -le $cols; $c++) {
                $txt = [string]$values[$r,$c]
                if ([string]::IsNullOrWhiteSpace($txt)) { continue }
                $v = Normalize $txt
                foreach ($lit in $literals) {
                    if ($v -like ("*" + (Normalize $lit) + "*")) {
                        Write-Host ("‚úÖ '{0}' en {1} ‚Üí R{2},C{3} ('{4}')" -f $lit, (Split-Path $path -Leaf), $r, $c, $txt) -ForegroundColor Green
                        $results += [PSCustomObject]@{
                            Fichero = $path
                            Hoja    = $target.Name
                            Literal = $lit
                            Celda   = "R$r,C$c"
                            Valor   = $txt
                        }
                        if ($stopAtFirst) { throw "STOP_GLOBAL" }
                    }
                }
            }
        }

        $wb.Close($false) | Out-Null
    }
    catch {
        if ($_.Exception.Message -eq "STOP_GLOBAL") { break }
        Write-Host ("‚ö†Ô∏è Error con {0}: {1}" -f (Split-Path $path -Leaf), $_.Exception.Message) -ForegroundColor DarkYellow
    }
}

# ---------- Exportar ----------
if ($results.Count -gt 0) {
    $outFile = Join-Path $env:USERPROFILE "Desktop\Resultados_Blueprint.xlsx"
    $results | Export-Csv -Path $outFile -NoTypeInformation -Encoding UTF8
    Write-Host "`n‚úÖ Resultados guardados en: $outFile" -ForegroundColor Green
} else {
    Write-Host "`n‚ö™ No se encontraron coincidencias." -ForegroundColor Gray
}

# ---------- Cierre limpio ----------
$excel.Quit()
[System.Runtime.InteropServices.Marshal]::ReleaseComObject($excel) | Out-Null
Get-Process excel -ErrorAction SilentlyContinue | ForEach-Object { try { $_.Kill() } catch {} }

Write-Host "`n‚úîÔ∏è Terminado (optimizado, r√°pido y limpio)." -ForegroundColor Green