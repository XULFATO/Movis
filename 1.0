# ==========================================================
# C√ìDIGO 1 ‚Äî Buscar literales en Blueprints (Excel COM, con copia local)
# ==========================================================
$ErrorActionPreference = "Stop"

Write-Host "üîç B√∫squeda de literales en Blueprints (Excel COM con copia local)" -ForegroundColor Cyan

# ---------- ENTRADA ----------
$basePath = Read-Host "üìÇ Introduce la ruta base (p.ej. R:\Proyectos)"
if (-not (Test-Path $basePath)) { Write-Host "‚ùå Ruta no v√°lida."; exit }

Write-Host "`n‚úèÔ∏è Introduce hasta 10 literales (uno por l√≠nea). Deja vac√≠o para terminar." -ForegroundColor Yellow
$literals = @()
for ($i=1; $i -le 10; $i++) {
    $lit = Read-Host ("Literal #{0}" -f $i)
    if ([string]::IsNullOrWhiteSpace($lit)) { break }
    $literals += $lit
}
if ($literals.Count -eq 0) { Write-Host "‚ùå Sin literales. Saliendo."; exit }

$stopAtFirst = (Read-Host "¬øParar al encontrar la primera coincidencia? (S/N)") -match '^[sS]$'

# ---------- FUNCIONES ----------
function Normalize([string]$s) {
    if ([string]::IsNullOrWhiteSpace($s)) { return "" }
    $d = $s.Normalize([Text.NormalizationForm]::FormD)
    ($d.ToCharArray() | Where-Object {
        [Globalization.CharUnicodeInfo]::GetUnicodeCategory($_) -ne [Globalization.UnicodeCategory]::NonSpacingMark
    }) -join '' | ForEach-Object { $_ } | Out-String | % { $_.Trim().ToLower() }
}

# ---------- RECORRIDO ----------
$reDoc = '(?i)(documentaci[o√≥]n\s+implantaci[o√≥]n)'
$reAna = '(?i)(an[a√°]lisis)'
$blueprints = @()

Write-Host "`nüìÅ Recorriendo estructura..." -ForegroundColor DarkCyan

Get-ChildItem -Path $basePath -Directory |
Where-Object { $_.Name.Length -ge 4 -and $_.Name[3] -eq '_' } |
Sort-Object LastWriteTime -Descending |
ForEach-Object {
    $dir1 = $_
    Write-Host "‚Üí Revisando carpeta principal: $($dir1.Name)" -ForegroundColor Yellow

    Get-ChildItem -Path $dir1.FullName -Directory -ErrorAction SilentlyContinue | ForEach-Object {
        $dir2 = $_
        $docDirs = Get-ChildItem -Path $dir2.FullName -Directory -ErrorAction SilentlyContinue | Where-Object { $_.Name -match $reDoc }
        foreach ($doc in $docDirs) {
            $anaDirs = Get-ChildItem -Path $doc.FullName -Directory -ErrorAction SilentlyContinue | Where-Object { $_.Name -match $reAna }
            foreach ($ana in $anaDirs) {
                Write-Host "   üìÇ Revisando subcarpeta: $($ana.FullName)" -ForegroundColor Cyan
                $found = Get-ChildItem -Path $ana.FullName -File -ErrorAction SilentlyContinue | Where-Object {
                    $_.Name -match '(?i)Blueprint.*\.(xlsx|xlsm)$' -and $_.Name -notlike '~$*'
                }
                foreach ($f in $found) {
                    Write-Host "      ‚úÖ Encontrado Blueprint: $($f.FullName)" -ForegroundColor Green
                    $blueprints += $f.FullName
                }
            }
        }
    }
}

if ($blueprints.Count -eq 0) { Write-Host "‚ö†Ô∏è No se encontraron Blueprints."; exit }

# ---------- AN√ÅLISIS ----------
$results = @()
$excel = New-Object -ComObject Excel.Application
$excel.Visible = $false
$excel.DisplayAlerts = $false

foreach ($path in $blueprints) {
    try {
        $localCopy = Join-Path $env:TEMP ([IO.Path]::GetFileName($path))
        Copy-Item -Path $path -Destination $localCopy -Force

        Write-Host "      üß© Copiado localmente y abriendo: $localCopy" -ForegroundColor DarkCyan
        $wb = $excel.Workbooks.Open($localCopy, 0, $true)
        Write-Host "      ‚úÖ Excel abierto correctamente." -ForegroundColor Green

        $sheet = $null
        foreach ($sh in $wb.Worksheets) {
            $n = Normalize $sh.Name
            if ($n -match 'analisis' -and $n -match 'concept') { $sheet = $sh; break }
        }

        if (-not $sheet) {
            Write-Host "‚ö†Ô∏è No hay hoja 'An√°lisis conceptos' en $(Split-Path $path -Leaf)" -ForegroundColor Yellow
            $wb.Close($false) | Out-Null
            Remove-Item $localCopy -Force
            continue
        }

        $used = $sheet.UsedRange
        $rows = $used.Rows.Count
        $cols = $used.Columns.Count

        for ($r = 1; $r -le $rows; $r++) {
            for ($c = 1; $c -le $cols; $c++) {
                $txt = ""
                try { $txt = [string]$used.Cells.Item($r,$c).Text } catch { continue }
                if ([string]::IsNullOrWhiteSpace($txt)) { continue }
                $v = Normalize $txt
                foreach ($lit in $literals) {
                    if ($v -like ("*" + (Normalize $lit) + "*")) {
                        Write-Host "‚úÖ '$lit' en $(Split-Path $path -Leaf) ‚Üí R$r,C$c ('$txt')" -ForegroundColor Green
                        $results += [PSCustomObject]@{
                            Fichero = $path
                            Hoja    = $sheet.Name
                            Literal = $lit
                            Celda   = "R$rC$c"
                            Valor   = $txt
                        }
                        if ($stopAtFirst) { throw "STOP_GLOBAL" }
                    }
                }
            }
        }

        $wb.Close($false) | Out-Null
        Remove-Item $localCopy -Force
    } catch {
        if ($_.Exception.Message -eq "STOP_GLOBAL") { break }
        Write-Host "‚ö†Ô∏è Error con $(Split-Path $path -Leaf): $($_.Exception.Message)" -ForegroundColor Yellow
        try { Remove-Item $localCopy -Force } catch {}
    }
}

$excel.Quit()
[System.Runtime.InteropServices.Marshal]::ReleaseComObject($excel) | Out-Null

# ---------- EXPORTAR ----------
if ($results.Count -gt 0) {
    $outFile = Join-Path $env:USERPROFILE "Desktop\Resultados_Blueprint_COM.xlsx"
    $results | Export-Excel -Path $outFile -AutoSize -TableName "Resultados" -ErrorAction SilentlyContinue
    if (-not (Test-Path $outFile)) {
        $results | Export-Csv -Path ($outFile -replace '\.xlsx$', '.csv') -NoTypeInformation -Encoding UTF8
    }
    Write-Host "`n‚úÖ Resultados guardados en: $outFile" -ForegroundColor Green
} else {
    Write-Host "‚ö™ No se encontraron coincidencias." -ForegroundColor Gray
}

Write-Host "`n‚úîÔ∏è Proceso completado (Excel COM con copia local)." -ForegroundColor Green











# ==========================================================
# C√ìDIGO 2 ‚Äî Buscar literales en Blueprints (Open XML, sin Excel)
# ==========================================================
Add-Type -AssemblyName System.IO.Compression.FileSystem
$ErrorActionPreference = "Stop"

Write-Host "üîç B√∫squeda de literales en Blueprints (Open XML con copia local)" -ForegroundColor Cyan

# ---------- ENTRADA ----------
$basePath = Read-Host "üìÇ Introduce la ruta base (p.ej. R:\Proyectos)"
if (-not (Test-Path $basePath)) { Write-Host "‚ùå Ruta no v√°lida."; exit }

Write-Host "`n‚úèÔ∏è Introduce hasta 10 literales (uno por l√≠nea). Deja vac√≠o para terminar." -ForegroundColor Yellow
$literals = @()
for ($i=1; $i -le 10; $i++) {
    $lit = Read-Host ("Literal #{0}" -f $i)
    if ([string]::IsNullOrWhiteSpace($lit)) { break }
    $literals += $lit
}
if ($literals.Count -eq 0) { Write-Host "‚ùå Sin literales. Saliendo."; exit }

$stopAtFirst = (Read-Host "¬øParar al encontrar la primera coincidencia? (S/N)") -match '^[sS]$'

function Normalize([string]$s) {
    if ([string]::IsNullOrWhiteSpace($s)) { return "" }
    $d = $s.Normalize([Text.NormalizationForm]::FormD)
    ($d.ToCharArray() | Where-Object {
        [Globalization.CharUnicodeInfo]::GetUnicodeCategory($_) -ne [Globalization.UnicodeCategory]::NonSpacingMark
    }) -join '' | ForEach-Object { $_ } | Out-String | % { $_.Trim().ToLower() }
}

# ---------- RECORRIDO ----------
$reDoc = '(?i)(documentaci[o√≥]n\s+implantaci[o√≥]n)'
$reAna = '(?i)(an[a√°]lisis)'
$blueprints = @()

Write-Host "`nüìÅ Recorriendo estructura..." -ForegroundColor DarkCyan

Get-ChildItem -Path $basePath -Directory |
Where-Object { $_.Name.Length -ge 4 -and $_.Name[3] -eq '_' } |
Sort-Object LastWriteTime -Descending |
ForEach-Object {
    $dir1 = $_
    Write-Host "‚Üí Revisando carpeta principal: $($dir1.Name)" -ForegroundColor Yellow

    Get-ChildItem -Path $dir1.FullName -Directory -ErrorAction SilentlyContinue | ForEach-Object {
        $dir2 = $_
        $docDirs = Get-ChildItem -Path $dir2.FullName -Directory -ErrorAction SilentlyContinue | Where-Object { $_.Name -match $reDoc }
        foreach ($doc in $docDirs) {
            $anaDirs = Get-ChildItem -Path $doc.FullName -Directory -ErrorAction SilentlyContinue | Where-Object { $_.Name -match $reAna }
            foreach ($ana in $anaDirs) {
                Write-Host "   üìÇ Revisando subcarpeta: $($ana.FullName)" -ForegroundColor Cyan
                $found = Get-ChildItem -Path $ana.FullName -File -ErrorAction SilentlyContinue | Where-Object {
                    $_.Name -match '(?i)Blueprint.*\.xlsx$' -and $_.Name -notlike '~$*'
                }
                foreach ($f in $found) {
                    Write-Host "      ‚úÖ Encontrado Blueprint: $($f.FullName)" -ForegroundColor Green
                    $blueprints += $f.FullName
                }
            }
        }
    }
}

if ($blueprints.Count -eq 0) { Write-Host "‚ö†Ô∏è No se encontraron Blueprints."; exit }

# ---------- AN√ÅLISIS OPEN XML ----------
$results = @()
foreach ($path in $blueprints) {
    try {
        $localCopy = Join-Path $env:TEMP ([IO.Path]::GetFileName($path))
        Copy-Item -Path $path -Destination $localCopy -Force

        Write-Host "      üß© Copiado localmente y analizando: $localCopy" -ForegroundColor DarkCyan
        $tmp = Join-Path $env:TEMP ([IO.Path]::GetRandomFileName())
        [System.IO.Compression.ZipFile]::ExtractToDirectory($localCopy, $tmp)

        $sheetFiles = Get-ChildItem (Join-Path $tmp "xl\worksheets") -Filter "*.xml"
        foreach ($sheet in $sheetFiles) {
            $xml = Get-Content $sheet.FullName -Raw
            $norm = (Normalize $xml)
            foreach ($lit in $literals) {
                if ($norm -like ("*" + (Normalize $lit) + "*")) {
                    Write-Host "‚úÖ '$lit' encontrado en hoja $($sheet.BaseName) de $(Split-Path $path -Leaf)" -ForegroundColor Green
                    $results += [PSCustomObject]@{
                        Fichero = $path
                        Hoja    = $sheet.BaseName
                        Literal = $lit
                        Celda   = ""
                        Valor   = ""
                    }
                    if ($stopAtFirst) { throw "STOP_GLOBAL" }
                }
            }
        }

        Remove-Item -Path $tmp -Recurse -Force -ErrorAction SilentlyContinue
        Remove-Item -Path $localCopy -Force -ErrorAction SilentlyContinue
    } catch {
        if ($_.Exception.Message -eq "STOP_GLOBAL") { break }
        Write-Host "‚ö†Ô∏è Error con $(Split-Path $path -Leaf): $($_.Exception.Message)" -ForegroundColor Yellow
        try { Remove-Item $localCopy -Force } catch {}
    }
}

# ---------- EXPORTAR ----------
if ($results.Count -gt 0) {
    $outFile = Join-Path $env:USERPROFILE "Desktop\Resultados_Blueprint_OpenXML.xlsx"
    $results | Export-Csv -Path $outFile -NoTypeInformation -Encoding UTF8
    Write-Host "`n‚úÖ Resultados guardados en: $outFile" -ForegroundColor Green
} else {
    Write-Host "‚ö™ No se encontraron coincidencias." -ForegroundColor Gray
}

Write-Host "`n‚úîÔ∏è Proceso completado (Open XML con copia local)." -ForegroundColor Green