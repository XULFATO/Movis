# ==========================================================
# Buscar literales en Blueprints (3 modos, sin lecturas/escrituras externas)
# ==========================================================
$ErrorActionPreference = "Stop"

# ---------- üóÇÔ∏è LISTA INTERNA (Modo 2) ----------
# Puedes mezclar carpetas y ficheros .xlsx/.xlsm
$rutasOrigen = @(
    "R:\Clientes\J18_GroupLink_6.1\01_Documentaci√≥n Implantaci√≥n\03_An√°lisis",
    "R:\Clientes\Z02_Finanzas_3.0\01_Documentaci√≥n Implantaci√≥n\03_An√°lisis\Blueprint.xlsx"
)

# ---------- üîç LITERALES A BUSCAR ----------
$literals = @("Embargo", "Embargo Salarial")

# ---------- FUNCIONES AUXILIARES ----------
function Remove-Diacritics([string]$s){
    if ([string]::IsNullOrWhiteSpace($s)) { return "" }
    $d = $s.Normalize([Text.NormalizationForm]::FormD)
    ($d.ToCharArray() | Where-Object {
        [Globalization.CharUnicodeInfo]::GetUnicodeCategory($_) -ne [Globalization.UnicodeCategory]::NonSpacingMark
    }) -join ''
}
function Normalize([string]$s){ (Remove-Diacritics $s).ToLowerInvariant().Trim() }
function ColumnLetter([int]$n){
    $s = ""; while($n -gt 0){$n--; $s=[char]([int][char]'A'+($n%26))+$s; $n=[math]::Floor($n/26)}; return $s
}
function Select-Mode {
    Write-Host "`nüü¶ MODO DE B√öSQUEDA" -ForegroundColor Cyan
    Write-Host "1Ô∏è‚É£  Escanear autom√°ticamente toda la estructura (ruta base)"
    Write-Host "2Ô∏è‚É£  Usar listado interno de rutas (arriba en `$rutasOrigen`)"
    Write-Host "3Ô∏è‚É£  Escanear filtrando solo carpetas que contengan un texto (por ej. _23_, _BKT_)"
    $r = Read-Host "Elige modo (1, 2 o 3)"
    if ($r -eq '2'){ return 2 } elseif ($r -eq '3'){ return 3 } else { return 1 }
}

# ---------- ENTRADA ----------
Write-Host "üîç B√∫squeda de literales en Blueprints ‚Üí hoja 'An√°lisis conceptos'" -ForegroundColor Cyan
$mode = Select-Mode

# Preparar patr√≥n de b√∫squeda
$pattern = ($literals | ForEach-Object { [regex]::Escape((Normalize $_)) }) -join "|"
$reDoc = '(?i)(documentaci[o√≥]n\s+implantaci[o√≥]n)'
$reAna = '(?i)(an[a√°]lisis)'

# ---------- LOCALIZAR BLUEPRINTS ----------
$blueprints = @()

if ($mode -eq 1 -or $mode -eq 3) {
    # Escaneo (total o filtrado)
    $basePath = Read-Host "üìÇ Introduce la ruta base (p.ej. R:\Proyectos)"
    if (-not (Test-Path $basePath)) { Write-Host "‚ùå Ruta no v√°lida."; exit }

    $filtro = ""
    if ($mode -eq 3) {
        $filtro = Read-Host "üî§ Introduce texto a buscar en los nombres de carpetas (por ej. _23_ o _BKT_)"
        if ([string]::IsNullOrWhiteSpace($filtro)) { Write-Host "‚ö†Ô∏è No se indic√≥ filtro, se escanear√° todo."; $filtro = "" }
    }

    Write-Host "`nüìÅ Escaneando carpetas..." -ForegroundColor DarkCyan
    $carpetas = Get-ChildItem -Path $basePath -Directory |
                Where-Object { $_.Name.Length -ge 4 -and $_.Name[3] -eq '_' } |
                Sort-Object LastWriteTime -Descending
    if ($filtro -ne "") {
        $carpetas = $carpetas | Where-Object { $_.Name -match [regex]::Escape($filtro) }
        Write-Host ("üîé Aplicado filtro: '{0}' ‚Üí {1} carpetas coinciden" -f $filtro, $carpetas.Count) -ForegroundColor Yellow
    }

    foreach ($dir1 in $carpetas) {
        Write-Host ("‚Üí Carpeta principal: {0}" -f $dir1.Name) -ForegroundColor Yellow
        Get-ChildItem -Path $dir1.FullName -Directory -ErrorAction SilentlyContinue | ForEach-Object {
            $dir2 = $_
            $docDirs = Get-ChildItem -Path $dir2.FullName -Directory -ErrorAction SilentlyContinue |
                       Where-Object { $_.Name -match $reDoc }
            foreach ($doc in $docDirs) {
                $anaDirs = Get-ChildItem -Path $doc.FullName -Directory -ErrorAction SilentlyContinue |
                           Where-Object { $_.Name -match $reAna }
                foreach ($ana in $anaDirs) {
                    Write-Host ("   üìÇ Subcarpeta An√°lisis: {0}" -f $ana.FullName) -ForegroundColor Cyan
                    $found = Get-ChildItem -Path $ana.FullName -Recurse -File -ErrorAction SilentlyContinue |
                             Where-Object { $_.Name -notlike '~$*' -and $_.Name -match '(?i)Blueprint.*\.(xlsx|xlsm)$' }
                    foreach ($f in $found) {
                        Write-Host ("      ‚úÖ Blueprint: {0}" -f $f.FullName) -ForegroundColor Green
                        $blueprints += $f.FullName
                    }
                }
            }
        }
    }
}
elseif ($mode -eq 2) {
    Write-Host "`nüìÑ Usando listado interno de rutas..." -ForegroundColor DarkCyan
    foreach ($ruta in $rutasOrigen) {
        if (-not (Test-Path $ruta)) { Write-Host "‚ö†Ô∏è Ruta no encontrada: $ruta" -ForegroundColor DarkYellow; continue }
        if ((Get-Item $ruta).PSIsContainer) {
            $found = Get-ChildItem -Path $ruta -Recurse -File -ErrorAction SilentlyContinue |
                     Where-Object { $_.Name -notlike '~$*' -and $_.Name -match '(?i)Blueprint.*\.(xlsx|xlsm)$' }
            foreach ($f in $found) {
                Write-Host ("      ‚úÖ Blueprint: {0}" -f $f.FullName) -ForegroundColor Green
                $blueprints += $f.FullName
            }
        } else {
            Write-Host ("      ‚úÖ Blueprint: {0}" -f $ruta) -ForegroundColor Green
            $blueprints += $ruta
        }
    }
}

if ($blueprints.Count -eq 0) { Write-Host "‚ö†Ô∏è No se encontraron Blueprints."; exit }
Write-Host ("   ‚Üí {0} ficheros detectados." -f $blueprints.Count) -ForegroundColor Green

# ---------- ANALIZAR EXCEL ----------
$prevExcel = Get-Process excel -ErrorAction SilentlyContinue
$excel = New-Object -ComObject Excel.Application
$excel.Visible = $false
$excel.DisplayAlerts = $false
$excel.AutomationSecurity = 3
$excel.EnableEvents = $false

$totalEncontrados = 0
$totalBlueprintsOK = 0
$detalles = @()
$inicio = Get-Date

foreach ($path in $blueprints) {
    $nombre = Split-Path $path -Leaf
    Write-Host ("`nüîπ Analizando: {0}" -f $path) -ForegroundColor DarkCyan
    try {
        $wb = $excel.Workbooks.Open($path, 0, $true)
        $target = $null
        foreach ($sh in $wb.Worksheets) {
            $n = Normalize $sh.Name
            if ($n -match 'analisis' -and $n -match 'concept') { $target = $sh; break }
        }
        if (-not $target) {
            Write-Host ("‚ö†Ô∏è Sin hoja 'An√°lisis conceptos'") -ForegroundColor DarkYellow
            $wb.Close($false) | Out-Null
            continue
        }

        $vals = $target.UsedRange.Value2
        if (-not $vals) { Write-Host "‚ö™ Hoja vac√≠a."; $wb.Close($false); continue }

        $rows = $vals.GetLength(0)
        $cols = $vals.GetLength(1)
        $totalCells = $rows * $cols
        $processed = 0
        $hitsLocal = @()

        for ($r=1; $r -le $rows; $r++) {
            for ($c=1; $c -le $cols; $c++) {
                $processed++
                if ($processed % 500 -eq 0) {
                    $pct = [math]::Round(($processed / $totalCells) * 100, 1)
                    Write-Progress -Activity "Analizando $nombre" -Status "$pct% completado" -PercentComplete $pct
                }
                $txt = [string]$vals[$r,$c]
                if ([string]::IsNullOrWhiteSpace($txt)) { continue }
                $v = Normalize $txt
                if ($v -match $pattern) {
                    $celda = "$(ColumnLetter $c)$r"
                    Write-Host ("‚úÖ '{0}' ‚Üí {1} {2}" -f $txt, $path, $celda) -ForegroundColor Green
                    $hitsLocal += [PSCustomObject]@{
                        Fichero = $path
                        Literal = ($literals | Where-Object { $v -like ("*" + (Normalize $_) + "*") }) -join ", "
                        Celda   = $celda
                        Valor   = $txt
                    }
                }
            }
        }
        Write-Progress -Activity "Analizando $nombre" -Completed

        if ($hitsLocal.Count -gt 0) {
            $totalBlueprintsOK++
            $totalEncontrados += $hitsLocal.Count
            $detalles += $hitsLocal
            Write-Host ("   ‚úîÔ∏è {0} coincidencias en este Blueprint" -f $hitsLocal.Count) -ForegroundColor Green
        } else {
            Write-Host ("   ‚ö™ Sin coincidencias en {0}" -f $nombre) -ForegroundColor Gray
        }

        $wb.Close($false) | Out-Null
    } catch {
        Write-Progress -Activity "Analizando $nombre" -Completed
        Write-Host ("‚ö†Ô∏è Error en {0}: {1}" -f $nombre, $_.Exception.Message) -ForegroundColor DarkYellow
    }
}

# ---------- RESUMEN ----------
$fin = Get-Date
$dur = New-TimeSpan -Start $inicio -End $fin
Write-Host "`n==============================================" -ForegroundColor DarkCyan
Write-Host ("üìä RESUMEN FINAL") -ForegroundColor Cyan
Write-Host ("   Blueprints analizados : {0}" -f $blueprints.Count)
Write-Host ("   Con hallazgos : {0}" -f $totalBlueprintsOK)
Write-Host ("   Coincidencias totales : {0}" -f $totalEncontrados)
Write-Host ("   Tiempo total : {0} min {1:D2} s" -f $dur.Minutes, $dur.Seconds)
Write-Host "==============================================" -ForegroundColor DarkCyan

if ($detalles.Count -gt 0) {
    Write-Host "`nüîç Detalle de coincidencias:" -ForegroundColor Yellow
    $agrupado = $detalles | Group-Object Fichero
    foreach ($g in $agrupado) {
        Write-Host "`nüìÅ $($g.Name)" -ForegroundColor Cyan
        foreach ($d in $g.Group) {
            Write-Host ("   ‚Üí {0} | {1} | {2}" -f $d.Literal, $d.Celda, $d.Valor)
        }
    }
} else {
    Write-Host "`n‚ö™ No se encontraron coincidencias." -ForegroundColor Gray
}

# ---------- LIMPIEZA ----------
$excel.Quit()
[System.Runtime.InteropServices.Marshal]::ReleaseComObject($excel) | Out-Null
Write-Host "`n‚úîÔ∏è Proceso completado correctamente." -ForegroundColor Green