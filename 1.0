# Script para consolidar pestañas "análisis conceptos" de múltiples archivos Excel
# Requiere el módulo ImportExcel: Install-Module -Name ImportExcel -Scope CurrentUser

# ============= CONFIGURACIÓN =============
$carpetaOrigen = "C:\Ruta\A\Tus\Excels"  # Cambia esta ruta
$archivoDestino = "C:\Ruta\Destino\Consolidado.xlsx"  # Cambia esta ruta
$nombrePestana = "análisis conceptos"
$textoBusqueda = "utilizada Cliente"
$columnaFinal = "convenios afectados"
# =========================================

# Verificar si el módulo ImportExcel está instalado
if (-not (Get-Module -ListAvailable -Name ImportExcel)) {
    Write-Host "ERROR: El módulo ImportExcel no está instalado." -ForegroundColor Red
    Write-Host "Ejecuta: Install-Module -Name ImportExcel -Scope CurrentUser" -ForegroundColor Yellow
    exit
}

Import-Module ImportExcel

# Array para almacenar todos los datos consolidados
$datosConsolidados = @()
$contadorArchivos = 0
$contadorExitosos = 0

# Obtener todos los archivos Excel
$archivosExcel = Get-ChildItem -Path $carpetaOrigen -Filter *.xlsx -Recurse | Where-Object { $_.Name -notlike "~$*" }

Write-Host "Encontrados $($archivosExcel.Count) archivos Excel en la carpeta" -ForegroundColor Cyan
Write-Host "Procesando archivos..." -ForegroundColor Cyan

foreach ($archivo in $archivosExcel) {
    $contadorArchivos++
    Write-Host "`n[$contadorArchivos/$($archivosExcel.Count)] Procesando: $($archivo.Name)" -ForegroundColor Yellow
    
    try {
        # Obtener las pestañas del archivo
        $pestanas = Get-ExcelSheetInfo -Path $archivo.FullName
        
        # Buscar la pestaña "análisis conceptos"
        $pestanaObjetivo = $pestanas | Where-Object { $_.Name -like "*$nombrePestana*" }
        
        if ($pestanaObjetivo) {
            Write-Host "  ✓ Pestaña '$nombrePestana' encontrada" -ForegroundColor Green
            
            # Leer toda la hoja
            $datos = Import-Excel -Path $archivo.FullName -WorksheetName $pestanaObjetivo.Name -DataOnly
            
            if ($datos.Count -eq 0) {
                Write-Host "  ✗ La pestaña está vacía" -ForegroundColor Red
                continue
            }
            
            # Buscar la fila que contiene "utilizada Cliente"
            $filaInicio = $null
            $columnaInicio = $null
            
            # Obtener las propiedades (columnas) del primer objeto
            $columnas = $datos[0].PSObject.Properties.Name
            
            # Buscar en qué fila y columna está "utilizada Cliente"
            for ($i = 0; $i -lt $datos.Count; $i++) {
                foreach ($col in $columnas) {
                    if ($datos[$i].$col -like "*$textoBusqueda*") {
                        $filaInicio = $i
                        $columnaInicio = $col
                        break
                    }
                }
                if ($filaInicio -ne $null) { break }
            }
            
            if ($filaInicio -eq $null) {
                Write-Host "  ✗ No se encontró '$textoBusqueda' en la pestaña" -ForegroundColor Red
                continue
            }
            
            Write-Host "  ✓ Encabezado encontrado en fila $($filaInicio + 1)" -ForegroundColor Green
            
            # Extraer datos desde la fila del encabezado hasta el final
            $datosExtraidos = $datos[$filaInicio..($datos.Count - 1)]
            
            # Añadir columna con el nombre del archivo
            foreach ($fila in $datosExtraidos) {
                $fila | Add-Member -NotePropertyName "Archivo_Origen" -NotePropertyValue $archivo.Name -Force
            }
            
            # Añadir al array consolidado
            $datosConsolidados += $datosExtraidos
            $contadorExitosos++
            
            Write-Host "  ✓ Extraídas $($datosExtraidos.Count) filas (incluyendo encabezado)" -ForegroundColor Green
            
        } else {
            Write-Host "  ✗ No tiene la pestaña '$nombrePestana'" -ForegroundColor Gray
        }
        
    } catch {
        Write-Host "  ✗ Error al procesar: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Exportar datos consolidados
if ($datosConsolidados.Count -gt 0) {
    Write-Host "`n========================================" -ForegroundColor Cyan
    Write-Host "Generando archivo consolidado..." -ForegroundColor Cyan
    
    try {
        # Eliminar archivo destino si existe
        if (Test-Path $archivoDestino) {
            Remove-Item $archivoDestino -Force
        }
        
        # Exportar a Excel
        $datosConsolidados | Export-Excel -Path $archivoDestino -WorksheetName "Consolidado" -AutoSize -FreezeTopRow -BoldTopRow
        
        Write-Host "✓ Archivo consolidado creado exitosamente" -ForegroundColor Green
        Write-Host "  Ubicación: $archivoDestino" -ForegroundColor White
        Write-Host "  Total de filas: $($datosConsolidados.Count)" -ForegroundColor White
        Write-Host "  Archivos procesados exitosamente: $contadorExitosos de $contadorArchivos" -ForegroundColor White
        
    } catch {
        Write-Host "✗ Error al crear el archivo consolidado: $($_.Exception.Message)" -ForegroundColor Red
    }
    
} else {
    Write-Host "`n✗ No se encontraron datos para consolidar" -ForegroundColor Red
}

Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "Proceso completado" -ForegroundColor Cyan