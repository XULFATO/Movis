# ===========================================
# Buscar-Blueprints.ps1
# Busca literales (con espacios) en la hoja "An√°lisis Conceptos"
# dentro de ficheros "Blueprint*.xls*" ubicados en estructura:
#   carpeta ra√≠z con "_" en 4¬™ posici√≥n
#   -> subcarpeta (nombre variable)
#   -> "Documentaci√≥n Implantaci√≥n" (flexible: con/ sin tilde, con prefijos 01-, 01_, etc.)
#   -> "An√°lisis" (flexible: con/ sin tilde, con prefijos 01-, 01_, etc.)
# Recorre las carpetas ra√≠z en orden descendente por fecha de modificaci√≥n.
# ===========================================

$ErrorActionPreference = 'Stop'

function Ask-YesNo($prompt) {
    while ($true) {
        $r = Read-Host "$prompt (S/N)"
        if ($r -match '^[sS]$') { return $true }
        if ($r -match '^[nN]$') { return $false }
    }
}

Write-Host "üîç B√∫squeda de literales en hoja 'An√°lisis Conceptos' de ficheros 'Blueprint'..." -ForegroundColor Cyan

# Ruta base
$basePath = Read-Host "üìÇ Introduce la ruta base (p.ej. R:\Proyectos)"
if (-not (Test-Path $basePath)) {
    Write-Host "‚ùå La ruta no existe: $basePath" -ForegroundColor Red
    exit 1
}

# Nombre exacto de la hoja (aj√∫stalo si difiere)
$sheetName = "An√°lisis Conceptos"

# Literales (hasta 10, pueden contener espacios)
Write-Host "`nIntroduce hasta 10 literales (pueden tener varias palabras, uno por l√≠nea). Deja vac√≠o para terminar." -ForegroundColor Yellow
$literals = @()
for ($i=1; $i -le 10; $i++) {
    $lit = Read-Host ("Literal #{0}" -f $i)
    if ([string]::IsNullOrWhiteSpace($lit)) { break }
    $literals += $lit
}
if ($literals.Count -eq 0) {
    Write-Host "‚ùå No se introdujo ning√∫n literal." -ForegroundColor Red
    exit 1
}

# ¬øParar en la primera coincidencia global?
$stopAtFirst = Ask-YesNo "¬øParar al encontrar la primera coincidencia?"

# ===========================================
# PATRONES FLEXIBLES DE CARPETAS
# ===========================================
# Documentaci√≥n Implantaci√≥n (con/sin tilde, con prefijo num√©rico y separadores)
# Ejemplos v√°lidos: "01 Documentaci√≥n Implantaci√≥n", "1-Documentacion Implantacion", "Documentaci√≥n Implantaci√≥n"
$regexDocImpl = '(?i)(^\s*\d{0,3}\s*[-_. ]*\s*documentaci[o√≥]n\s+implantaci[o√≥]n\b)|(\bdocumentaci[o√≥]n\s+implantaci[o√≥]n\b)'

# An√°lisis (con/sin tilde, con prefijo num√©rico y separadores)
# Ejemplos v√°lidos: "01 An√°lisis", "1-Analisis_03", "An√°lisis"
$regexAnalisis = '(?i)(^\s*\d{0,3}\s*[-_. ]*\s*an[a√°]lisis\b)|(\ban[a√°]lisis\b)'

# ===========================================
# RECORRER ESTRUCTURA DE CARPETAS
# ===========================================
Write-Host "`nüìÅ Recorriendo estructura (con '_' en 4¬™ posici√≥n, Doc. Implantaci√≥n/An√°lisis, orden descendente por fecha)..." -ForegroundColor DarkCyan

$files = @()

# 1) Solo carpetas de primer nivel con "_" en la 4¬™ posici√≥n, ordenadas por fecha modific.
Get-ChildItem -Path $basePath -Directory |
    Where-Object { $_.Name.Length -ge 4 -and $_.Name[3] -eq '_' } |
    Sort-Object LastWriteTime -Descending |
    ForEach-Object {

    $nivel1 = $_.FullName
    Write-Host (" ‚Üí Revisando carpeta principal: {0}" -f $_.Name) -ForegroundColor Gray

    # 2) Subcarpetas de nombre variable
    Get-ChildItem -Path $nivel1 -Directory -ErrorAction SilentlyContinue | ForEach-Object {
        $nivel2 = $_.FullName

        # 3) Carpeta que CASE con "Documentaci√≥n Implantaci√≥n" (flexible)
        $docImplDirs = Get-ChildItem -Path $nivel2 -Directory -ErrorAction SilentlyContinue | Where-Object {
            $_.Name -match $regexDocImpl
        }

        foreach ($docDir in $docImplDirs) {
            # 4) Dentro, carpeta que CASE con "An√°lisis" (flexible)
            $analisisDirs = Get-ChildItem -Path $docDir.FullName -Directory -ErrorAction SilentlyContinue | Where-Object {
                $_.Name -match $regexAnalisis
            }

            foreach ($anaDir in $analisisDirs) {
                # 5) Ficheros Blueprint
                $found = Get-ChildItem -Path $anaDir.FullName -File -Include '*Blueprint*.xlsx','*Blueprint*.xlsm','*Blueprint*.xls' -ErrorAction SilentlyContinue |
                         Where-Object { $_.Name -notlike '~$*' }
                if ($found) {
                    $files += $found
                }
            }
        }
    }
}

if ($files.Count -eq 0) {
    Write-Host "‚ö†Ô∏è No se encontraron ficheros 'Blueprint' en la estructura esperada." -ForegroundColor DarkYellow
    exit 0
}

Write-Host ("   ‚Üí {0} ficheros 'Blueprint' candidatos encontrados." -f $files.Count)

# ===========================================
# B√öSQUEDA EN EXCEL
# ===========================================

$excel = $null
try {
    $excel = New-Object -ComObject Excel.Application
    $excel.Visible = $false
    $excel.DisplayAlerts = $false

    $prevCalc = $excel.Calculation
    $prevScreen = $excel.ScreenUpdating
    $excel.ScreenUpdating = $false
    $excel.Calculation = -4135 # xlCalculationManual

    $results = New-Object System.Collections.Generic.List[object]

    # Constantes Excel
    $xlValues = -4163
    $xlPart   = 2
    $xlByRows = 1
    $xlNext   = 1

    foreach ($file in $files) {
        foreach ($lit in $literals) {
            $wb = $null
            try {
                $wb = $excel.Workbooks.Open($file.FullName, 0, $true)
                $sheet = $null
                foreach ($sh in $wb.Worksheets) {
                    if ($sh.Name -eq $sheetName) { $sheet = $sh; break }
                }
                if (-not $sheet) { continue }

                # Busca la cadena completa (admite espacios)
                $firstHit = $sheet.Cells.Find($lit, [Type]::Missing, $xlValues, $xlPart, $xlByRows, $xlNext, $false, [Type]::Missing, [Type]::Missing)
                if ($firstHit -ne $null) {
                    $addrStart = $firstHit.Address(0,0)
                    $results.Add([PSCustomObject]@{
                        Fichero = $file.FullName
                        Hoja    = $sheetName
                        Literal = $lit
                        Celda   = $addrStart
                    })

                    Write-Host "‚úÖ [$lit] en: $($file.Name)" -ForegroundColor Green

                    if ($stopAtFirst) {
                        $wb.Close($false)
                        throw [System.Exception]::new("STOP_GLOBAL")
                    }

                    # Recorrer todas las coincidencias de la misma hoja/archivo
                    $cursor = $firstHit
                    while ($true) {
                        $next = $sheet.Cells.FindNext($cursor)
                        if ($next -eq $null) { break }
                        $addrNext = $next.Address(0,0)
                        if ($addrNext -eq $addrStart) { break }
                        $results.Add([PSCustomObject]@{
                            Fichero = $file.FullName
                            Hoja    = $sheetName
                            Literal = $lit
                            Celda   = $addrNext
                        })
                        $cursor = $next
                    }
                }
            } catch {
                if ($_.Exception.Message -eq "STOP_GLOBAL") { throw }
                Write-Host ("‚ö†Ô∏è Error con: {0} ‚Üí {1}" -f $file.FullName, $_.Exception.Message) -ForegroundColor DarkYellow
            } finally {
                if ($wb -ne $null) { $wb.Close($false) | Out-Null }
            }
        }
    }

    # Restaurar Excel
    $excel.ScreenUpdating = $prevScreen
    $excel.Calculation    = $prevCalc

    # Crear Excel de resultados
    $outPath = Join-Path $env:USERPROFILE "Desktop\Resultados_Blueprint.xlsx"
    $wbOut = $excel.Workbooks.Add()
    $wsOut = $wbOut.Worksheets.Item(1)
    $wsOut.Name = "Resultados"

    $wsOut.Cells.Item(1,1) = "Fichero"
    $wsOut.Cells.Item(1,2) = "Hoja"
    $wsOut.Cells.Item(1,3) = "Literal"
    $wsOut.Cells.Item(1,4) = "Celda"

    $row = 2
    foreach ($r in $results) {
        $wsOut.Cells.Item($row,1) = $r.Fichero
        $wsOut.Cells.Item($row,2) = $r.Hoja
        $wsOut.Cells.Item($row,3) = $r.Literal
        $wsOut.Cells.Item($row,4) = $r.Celda
        $row++
    }

    if ($results.Count -gt 0) {
        $wsOut.Range("A1:D$($row-1)").EntireColumn.AutoFit() | Out-Null
    }

    $wbOut.SaveAs($outPath)
    $wbOut.Close($false)

    Write-Host "`n‚úÖ Terminado." -ForegroundColor Green
    if ($results.Count -gt 0) {
        Write-Host ("üìÑ Coincidencias: {0}" -f $results.Count)
        Write-Host ("üìÅ Archivo generado: {0}" -f $outPath) -ForegroundColor Cyan
    } else {
        Write-Host "‚ö†Ô∏è No se encontraron coincidencias." -ForegroundColor DarkYellow
    }

} catch {
    if ($_.Exception.Message -eq "STOP_GLOBAL") {
        Write-Host "`n‚èπ Parado en la primera coincidencia (por opci√≥n elegida)." -ForegroundColor Yellow
    } else {
        Write-Host ("‚ùå Error inesperado: {0}" -f $_.Exception.Message) -ForegroundColor Red
    }
} finally {
    if ($excel -ne $null) {
        $excel.DisplayAlerts = $false
        $excel.Quit()
        [System.Runtime.InteropServices.Marshal]::ReleaseComObject($excel) | Out-Null
    }
}