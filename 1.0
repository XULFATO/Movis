# ==========================================================
# Buscar literales en Blueprints (.xlsx) sin abrir Excel (OpenXML)
# ==========================================================
$ErrorActionPreference = "Stop"

# -------- LISTADO INTERNO DE RUTAS (modo 2 y modo 4) --------
$rutasOrigen = @(
    "O:\ADP_SP\Clientes_Bob_LOPD\J18_ANCERT\01. Documentación Implantación\03.-ANALISIS",
    "O:\ADP_SP\Clientes_Bob_LOPD\J20_TROPICAL_PARTNERS\01. Documentación Implantación\03.-ANALISIS"
)

# -------- FUNCIONES AUXILIARES --------
function Remove-Diacritics([string]$s) {
    if ([string]::IsNullOrWhiteSpace($s)) { return "" }
    $d = $s.Normalize([Text.NormalizationForm]::FormD)
    ($d.ToCharArray() | Where-Object {
        [Globalization.CharUnicodeInfo]::GetUnicodeCategory($_) -ne [Globalization.UnicodeCategory]::NonSpacingMark
    }) -join ''
}

function Normalize([string]$s) { 
    (Remove-Diacritics $s).ToLowerInvariant().Trim() -replace '\\', '/' 
}

function Select-Mode {
    Write-Host "`n🟦 MODO DE BÚSQUEDA" -ForegroundColor Cyan
    Write-Host "1️⃣  Escanear automáticamente toda la estructura"
    Write-Host "2️⃣  Usar listado interno (`$rutasOrigen)"
    Write-Host "3️⃣  Escanear filtrando solo carpetas que contengan un texto"
    Write-Host "4️⃣  Detectar Blueprints NO contemplados en `$rutasOrigen"
    $r = Read-Host "Elige modo (1, 2, 3 o 4)"
    switch ($r) {
        '2' { return 2 }
        '3' { return 3 }
        '4' { return 4 }
        default { return 1 }
    }
}

# -------- FUNCIÓN DE RESALTADO --------
function Highlight {
    param(
        [string]$text,
        [string]$pattern
    )
    if ([string]::IsNullOrWhiteSpace($text)) {
        Write-Host "" -ForegroundColor Gray
        return
    }

    $options = [System.Text.RegularExpressions.RegexOptions]::IgnoreCase
    $regex   = New-Object System.Text.RegularExpressions.Regex($pattern, $options)

    $lastIndex = 0
    $matches = $regex.Matches($text)

    if ($matches.Count -eq 0) {
        Write-Host $text -ForegroundColor Gray
        return
    }

    foreach ($m in $matches) {
        if ($m.Index -gt $lastIndex) {
            $seg = $text.Substring($lastIndex, $m.Index - $lastIndex)
            Write-Host -NoNewline $seg -ForegroundColor Gray
        }
        Write-Host -NoNewline $m.Value -ForegroundColor Yellow
        $lastIndex = $m.Index + $m.Length
    }

    if ($lastIndex -lt $text.Length) {
        Write-Host -NoNewline $text.Substring($lastIndex) -ForegroundColor Gray
    }
    Write-Host ""
}

# -------- ENTRADA --------
Write-Host "🔍 Búsqueda rápida en Blueprints (.xlsx) → hoja 'Análisis conceptos'" -ForegroundColor Cyan
$mode = Select-Mode

if ($mode -ne 4) {
    Write-Host "`n✏️  Introduce hasta 10 literales (uno por línea). Deja vacío para terminar." -ForegroundColor Yellow
    $literals = @()
    for ($i = 1; $i -le 10; $i++) {
        $lit = Read-Host ("Literal #{0}" -f $i)
        if ([string]::IsNullOrWhiteSpace($lit)) { break }
        $literals += $lit
    }
    if ($literals.Count -eq 0) { 
        Write-Host "❌ No se introdujo ningún literal. Saliendo." -ForegroundColor Red
        exit 
    }

    $pattern = "(?i)" + (($literals | ForEach-Object { [regex]::Escape((Normalize $_)) }) -join "|")
}

$reDoc = '(?i)(documentaci[oó]n\s+implantaci[oó]n)'
$reAna = '(?i)(an[aá]lisis)'

# -------- LOCALIZAR BLUEPRINTS --------
$blueprints = @()

if ($mode -eq 1 -or $mode -eq 3 -or $mode -eq 4) {
    $basePath = Read-Host "📂 Introduce la ruta base (p.ej. O:\ADP_SP)"
    if (-not (Test-Path $basePath)) { 
        Write-Host "❌ Ruta no válida." -ForegroundColor Red
        exit 
    }

    $filtro = ""
    if ($mode -eq 3) {
        $filtro = Read-Host "🔤 Texto que deben contener las carpetas (p. ej. _23_ o _BKT_)"
        if ([string]::IsNullOrWhiteSpace($filtro)) { $filtro = "" }
    }

    Write-Host "`n📁 Escaneando carpetas..." -ForegroundColor DarkCyan
    $carpetas = Get-ChildItem -Path $basePath -Directory -ErrorAction SilentlyContinue |
                Where-Object { $_.Name.Length -ge 4 -and $_.Name[3] -eq '_' } |
                Sort-Object LastWriteTime -Descending
    
    if ($filtro -ne "") {
        $carpetas = $carpetas | Where-Object { $_.Name -match [regex]::Escape($filtro) }
        Write-Host ("🔎 Aplicado filtro: '{0}' → {1} carpetas" -f $filtro, $carpetas.Count) -ForegroundColor Yellow
    }

    foreach ($dir1 in $carpetas) {
        Write-Host ("→ Carpeta principal: {0}" -f $dir1.Name) -ForegroundColor Yellow
        Get-ChildItem -Path $dir1.FullName -Directory -ErrorAction SilentlyContinue | ForEach-Object {
            $dir2 = $_
            $docDirs = Get-ChildItem -Path $dir2.FullName -Directory -ErrorAction SilentlyContinue |
                       Where-Object { $_.Name -match $reDoc }
            foreach ($doc in $docDirs) {
                $anaDirs = Get-ChildItem -Path $doc.FullName -Directory -ErrorAction SilentlyContinue |
                           Where-Object { $_.Name -match $reAna }
                foreach ($ana in $anaDirs) {
                    Write-Host ("   📂 Subcarpeta Análisis: {0}" -f $ana.FullName) -ForegroundColor Cyan
                    $found = Get-ChildItem -Path $ana.FullName -Recurse -File -ErrorAction SilentlyContinue |
                             Where-Object { $_.Name -notlike '~$*' -and $_.Name -match '(?i)Blueprint.*\.xlsx$' }
                    foreach ($f in $found) {
                        Write-Host ("      ✅ Blueprint: {0}" -f $f.FullName) -ForegroundColor Green
                        $blueprints += $f.FullName
                    }
                }
            }
        }
    }
}
elseif ($mode -eq 2) {
    Write-Host "`n📄 Usando listado interno de rutas..." -ForegroundColor DarkCyan
    foreach ($ruta in $rutasOrigen) {
        if (-not (Test-Path $ruta)) { 
            Write-Host "⚠️ Ruta no encontrada: $ruta" -ForegroundColor DarkYellow
            continue 
        }
        if ((Get-Item $ruta).PSIsContainer) {
            $found = Get-ChildItem -Path $ruta -Recurse -File -ErrorAction SilentlyContinue |
                     Where-Object { $_.Name -notlike '~$*' -and $_.Name -match '(?i)Blueprint.*\.xlsx$' }
            foreach ($f in $found) {
                Write-Host ("      ✅ Blueprint: {0}" -f $f.FullName) -ForegroundColor Green
                $blueprints += $f.FullName
            }
        } else {
            if ($ruta -match '(?i)Blueprint.*\.xlsx$') {
                Write-Host ("      ✅ Blueprint: {0}" -f $ruta) -ForegroundColor Green
                $blueprints += $ruta
            }
        }
    }
}

if ($blueprints.Count -eq 0) { 
    Write-Host "⚠️ No se encontraron Blueprints." -ForegroundColor DarkYellow
    exit 
}

# -------- MODO 4: DETECTAR NO CONTEMPLADOS --------
if ($mode -eq 4) {
    Write-Host "`n🔎 Comparando con la lista interna..." -ForegroundColor Cyan
    
    # Normalizar rutas internas para comparación
    $rutasNormalizadas = $rutasOrigen | ForEach-Object { Normalize $_ }
    
    $noContemplados = $blueprints | Where-Object {
        $blueprintPath = Normalize $_
        $estaContemplado = $false
        
        foreach ($rutaInterna in $rutasNormalizadas) {
            if ($blueprintPath -like "$rutaInterna*") {
                $estaContemplado = $true
                break
            }
        }
        
        -not $estaContemplado
    }

    if ($noContemplados.Count -gt 0) {
        Write-Host ("`n❗ Se encontraron {0} Blueprints no contemplados:" -f $noContemplados.Count) -ForegroundColor Red
        foreach ($nc in $noContemplados) {
            Write-Host ("   ➕ {0}" -f $nc) -ForegroundColor Red
        }
    } else {
        Write-Host "`n✅ Todos los Blueprints están contemplados." -ForegroundColor Green
    }

    Write-Host "`n✔️ Modo 4 completado." -ForegroundColor Green
    exit
}

Write-Host ("   → {0} ficheros detectados." -f $blueprints.Count) -ForegroundColor Green

# -------- ANALIZAR CON OPENXML --------
$totalEncontrados = 0
$totalBlueprintsOK = 0
$detalles = @()
$inicio = Get-Date

Add-Type -AssemblyName System.IO.Compression.FileSystem

foreach ($path in $blueprints) {
    Write-Host ("`n🔹 Analizando: {0}" -f $path) -ForegroundColor DarkCyan
    try {
        $tmpDir = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), [System.IO.Path]::GetRandomFileName())
        [System.IO.Compression.ZipFile]::ExtractToDirectory($path, $tmpDir)

        $sheetFiles = Get-ChildItem "$tmpDir\xl\worksheets" -File -ErrorAction SilentlyContinue
        $sheetNamesFile = "$tmpDir\xl\workbook.xml"
        $sheetNames = @{}
        
        if (Test-Path $sheetNamesFile) {
            $xml = [xml](Get-Content $sheetNamesFile -Raw)
            foreach ($s in $xml.workbook.sheets.sheet) {
                $sheetNames["sheet" + $s.sheetId] = $s.name
            }
        }

        $hitsLocal = @()

        foreach ($sheet in $sheetFiles) {
            $sheetContent = Get-Content $sheet.FullName -Raw -ErrorAction SilentlyContinue
            $sheetName = (Split-Path $sheet.Name -LeafBase)
            $displayName = if ($sheetNames.ContainsKey($sheetName)) { $sheetNames[$sheetName] } else { $sheet.Name }

            if ($sheetContent -match '(?i)an[aá]lisis' -and $sheetContent -match '(?i)concept') {
                $textos = (Select-String -InputObject $sheetContent -Pattern ">([^<]+)<" -AllMatches).Matches |
                          ForEach-Object { $_.Groups[1].Value }

                foreach ($t in $textos) {
                    if ([string]::IsNullOrWhiteSpace($t)) { continue }
                    $v = Normalize $t
                    if ($v -match $pattern) {
                        $totalEncontrados++
                        $hitsLocal += [PSCustomObject]@{
                            Fichero = $path
                            Hoja    = $displayName
                            Valor   = $t.Trim()
                        }
                    }
                }
            }
        }

        if ($hitsLocal.Count -gt 0) {
            $totalBlueprintsOK++
            Write-Host ("✅ {0} coincidencias encontradas en {1}" -f $hitsLocal.Count, (Split-Path $path -Leaf)) -ForegroundColor Green
            foreach ($hit in $hitsLocal) {
                Write-Host ("📄 Hoja: {0}" -f $hit.Hoja) -ForegroundColor Cyan
                Highlight $hit.Valor $pattern
                $detalles += $hit
            }
        } else {
            Write-Host ("⚪ Sin coincidencias en {0}" -f (Split-Path $path -Leaf)) -ForegroundColor Gray
        }

        Remove-Item -Path $tmpDir -Recurse -Force -ErrorAction SilentlyContinue
    } catch {
        Write-Host ("⚠️ Error en {0}: {1}" -f (Split-Path $path -Leaf), $_.Exception.Message) -ForegroundColor DarkYellow
    }
}

# -------- RESUMEN FINAL --------
$fin = Get-Date
$dur = New-TimeSpan -Start $inicio -End $fin
$agrupado = $detalles | Group-Object Fichero

Write-Host "`n==============================================" -ForegroundColor DarkCyan
Write-Host ("📊 RESUMEN FINAL") -ForegroundColor Cyan
Write-Host ("   Blueprints analizados : {0}" -f $blueprints.Count)
Write-Host ("   Con hallazgos         : {0}" -f $agrupado.Count)
Write-Host ("   Coincidencias totales : {0}" -f $totalEncontrados)
Write-Host ("   Tiempo total          : {0} min {1:D2} s" -f $dur.Minutes, $dur.Seconds)
Write-Host "==============================================" -ForegroundColor DarkCyan

if ($agrupado.Count -gt 0) {
    foreach ($g in $agrupado) {
        Write-Host "`n📁 $($g.Name)" -ForegroundColor Cyan
        foreach ($d in $g.Group) {
            Write-Host ("📄 Hoja: {0}" -f $d.Hoja) -ForegroundColor Blue
            Highlight $d.Valor $pattern
        }
    }
} else {
    Write-Host "`n⚪ No se encontraron coincidencias." -ForegroundColor Gray
}

Write-Host "`n✔️ Proceso completado