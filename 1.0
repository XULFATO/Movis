
# ==========================================================
# Buscar literales en Blueprints (.xlsx) - MÉTODO RÁPIDO OpenXML
# ==========================================================
$ErrorActionPreference = "Stop"
Add-Type -AssemblyName System.IO.Compression.FileSystem

$rutasOrigen = @(
    "O:\ADP_SP\Clientes_Bob_LOPD\J18_ANCERT\01. Documentacion Implantacion\03.-ANALISIS",
    "O:\ADP_SP\Clientes_Bob_LOPD\J20_TROPICAL_PARTNERS\01. Documentacion Implantacion\03.-ANALISIS"
)

function Remove-Diacritics([string]$s) {
    if ([string]::IsNullOrWhiteSpace($s)) { return "" }
    $d = $s.Normalize([Text.NormalizationForm]::FormD)
    ($d.ToCharArray() | Where-Object {
        [Globalization.CharUnicodeInfo]::GetUnicodeCategory($_) -ne [Globalization.UnicodeCategory]::NonSpacingMark
    }) -join ''
}

function Normalize([string]$s) {
    if ([string]::IsNullOrWhiteSpace($s)) { return "" }
    $s = $s -replace '\s+', ' '
    $s = $s -replace '[\u0000-\u001F]', ''
    $s = $s.Trim()
    Remove-Diacritics $s
}

function Select-Mode {
    Write-Host ""
    Write-Host "MODO DE BUSQUEDA"
    Write-Host "1) Escanear automaticamente toda la estructura"
    Write-Host "2) Usar listado interno (rutasOrigen)"
    Write-Host "3) Escanear filtrando solo carpetas que contengan un texto"
    Write-Host "4) Detectar Blueprints NO contemplados en rutasOrigen"
    Write-Host "5) Buscar en todos los Excel de una carpeta concreta"
    $r = Read-Host "Elige modo (1,2,3,4,5):"
    switch ($r) { '2' {2} '3' {3} '4' {4} '5' {5} default {1} }
}

function Highlight {
    param([string]$text,[string]$pattern)
    if ([string]::IsNullOrWhiteSpace($text)) { return }
    $regex = New-Object System.Text.RegularExpressions.Regex $pattern, ([System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
    $lastIndex = 0
    $matches = $regex.Matches($text)
    if ($matches.Count -eq 0) { Write-Host $text -ForegroundColor Gray; return }
    foreach ($m in $matches) {
        if ($m.Index -gt $lastIndex) {
            $seg = $text.Substring($lastIndex,$m.Index-$lastIndex)
            Write-Host -NoNewline $seg -ForegroundColor Gray
        }
        Write-Host -NoNewline $m.Value -ForegroundColor Yellow
        $lastIndex = $m.Index + $m.Length
    }
    if ($lastIndex -lt $text.Length) {
        Write-Host -NoNewline $text.Substring($lastIndex) -ForegroundColor Gray
    }
    Write-Host ""
}

Write-Host "Busqueda RAPIDA en Blueprints (.xlsx) con OpenXML"
$mode = Select-Mode

$literals = @()
$pattern = ""
if ($mode -ne 4) {
    Write-Host ""
    Write-Host "Introduce hasta 10 literales (uno por linea). Deja vacio para terminar."
    for ($i=1; $i -le 10; $i++) {
        $lit = Read-Host ("Literal #{0}" -f $i)
        if ([string]::IsNullOrWhiteSpace($lit)) { break }
        $literals += $lit
    }
    if ($literals.Count -eq 0) { Write-Host "No se introdujo ningun literal. Saliendo."; exit }
    $pattern = "(?i)" + (($literals | ForEach-Object { [regex]::Escape((Normalize $_)) }) -join "|")
}

$reDoc = '(?i)(documentaci[oó]n\s+implantaci[oó]n)'
$reAna = '(?i)(an[aá]lisis)'
$blueprints = @()

# --------- MISMO CÓDIGO DE LOCALIZACIÓN DE ARCHIVOS ---------
if ($mode -in 1,3,4) {
    $basePath = Read-Host "Ruta base (p.ej. O:\ADP_SP):"
    if (-not (Test-Path $basePath)) { Write-Host "Ruta no valida."; exit }

    $filtro = ""
    if ($mode -eq 3) {
        $filtro = Read-Host "Texto que deben contener las carpetas (p.ej. _23_):"
        if ([string]::IsNullOrWhiteSpace($filtro)) { $filtro = "" }
    }

    Write-Host "Escaneando carpetas..."
    $carpetas = Get-ChildItem -Path $basePath -Directory -ErrorAction SilentlyContinue |
                Where-Object { $_.Name.Length -ge 4 -and $_.Name[3] -eq '_' } |
                Sort-Object LastWriteTime -Descending

    if ($filtro -ne "") {
        $carpetas = $carpetas | Where-Object { $_.Name -match [regex]::Escape($filtro) }
        Write-Host ("Filtro aplicado: '{0}' -> {1} carpetas" -f $filtro, $carpetas.Count)
    }

    foreach ($dir1 in $carpetas) {
        Write-Host ("- Carpeta principal: {0}" -f $dir1.Name)
        Get-ChildItem -Path $dir1.FullName -Directory -ErrorAction SilentlyContinue | ForEach-Object {
            $dir2 = $_
            $docDirs = Get-ChildItem -Path $dir2.FullName -Directory -ErrorAction SilentlyContinue |
                       Where-Object { $_.Name -match $reDoc }
            foreach ($doc in $docDirs) {
                $anaDirs = Get-ChildItem -Path $doc.FullName -Directory -ErrorAction SilentlyContinue |
                           Where-Object { $_.Name -match $reAna }
                foreach ($ana in $anaDirs) {
                    Write-Host ("   * Subcarpeta Analisis: {0}" -f $ana.FullName)
                    $found = Get-ChildItem -Path $ana.FullName -Recurse -File -ErrorAction SilentlyContinue |
                             Where-Object { $_.Extension -match '(?i)\.xlsx$' -and $_.Name -match '(?i)Blueprint' }
                    foreach ($f in $found) {
                        Write-Host ("     > Excel: {0}" -f $f.FullName) -ForegroundColor Green
                        $blueprints += $f.FullName
                    }
                }
            }
        }
    }
}
elseif ($mode -eq 2) {
    Write-Host "Usando listado interno de rutas..."
    foreach ($ruta in $rutasOrigen) {
        if (-not (Test-Path $ruta)) { Write-Host "Ruta no encontrada: $ruta"; continue }
        $found = Get-ChildItem -Path $ruta -Recurse -File -ErrorAction SilentlyContinue |
                 Where-Object { $_.Extension -match '(?i)\.xlsx$' -and $_.Name -match '(?i)Blueprint' }
        foreach ($f in $found) {
            Write-Host ("     > Excel: {0}" -f $f.FullName) -ForegroundColor Green
            $blueprints += $f.FullName
        }
    }
}
elseif ($mode -eq 5) {
    $defaultDir = "C:\Users\XULFATO\Escritorio\RutasExcel"
    if (-not (Test-Path $defaultDir)) {
        New-Item -ItemType Directory -Path $defaultDir -Force | Out-Null
    }

    Write-Host ("Usando carpeta por defecto: {0}" -f $defaultDir) -ForegroundColor Yellow
    $change = Read-Host "¿Quieres cambiarla? (S/N)"
    if ($change -match '^[sS]$') {
        $dir = Read-Host "Introduce la nueva carpeta con los Excel (.xlsx)"
    } else {
        $dir = $defaultDir
    }

    if (-not (Test-Path $dir)) {
        Write-Host "Ruta no válida." -ForegroundColor Red
        exit
    }

    $blueprints = Get-ChildItem -Path $dir -File -Filter "*.xlsx" -ErrorAction SilentlyContinue |
                  Select-Object -ExpandProperty FullName
    Write-Host ("Se han encontrado {0} Excel en la carpeta." -f $blueprints.Count)
}

if ($mode -eq 4) {
    Write-Host "Comparando con la lista interna..."
    $rutasNorm = $rutasOrigen | ForEach-Object { Normalize $_ }
    $noContemplados = $blueprints | Where-Object {
        $bp = Normalize $_
        -not ($rutasNorm | Where-Object { $bp -like "$_*" })
    }
    if ($noContemplados.Count -gt 0) {
        Write-Host ("No contemplados: {0}" -f $noContemplados.Count) -ForegroundColor Red
        $noContemplados | ForEach-Object { Write-Host (" + {0}" -f $_) -ForegroundColor Red }
    } else {
        Write-Host "Todos los Blueprints estan contemplados." -ForegroundColor Green
    }
    exit
}

if ($blueprints.Count -eq 0) { Write-Host "No se encontraron Excel."; exit }

# ========== ANÁLISIS RÁPIDO CON OPENXML ==========
$totalEncontrados = 0
$detalles = @()
$inicio = Get-Date
$contador = 0
$totalFiles = $blueprints.Count

foreach ($path in $blueprints) {
    $contador++
    Write-Host ("[{0,3}/{1}] Analizando: {2}" -f $contador, $totalFiles, (Split-Path $path -Leaf)) -ForegroundColor Cyan

    if (-not (Test-Path $path)) {
        Write-Host "  - No existe." -ForegroundColor DarkYellow
        continue
    }

    $tmpDir = $null
    try {
        # Descomprimir Excel
        $tmpDir = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), [System.IO.Path]::GetRandomFileName())
        [System.IO.Compression.ZipFile]::ExtractToDirectory($path, $tmpDir)

        # 1. OBTENER NOMBRES DE HOJAS desde workbook.xml
        $workbookFile = "$tmpDir\xl\workbook.xml"
        $sheetNames = @{}
        $sheetIdsAnalisis = @()
        
        if (Test-Path $workbookFile) {
            $wbXml = [xml](Get-Content $workbookFile -Raw -Encoding UTF8)
            foreach ($s in $wbXml.workbook.sheets.sheet) {
                $sheetId = $s.sheetId
                $sheetName = $s.name
                $sheetNames["sheet$sheetId"] = $sheetName
                
                # Filtrar solo hojas que contienen "análisis" o "analisis"
                if ($sheetName -match '(?i)an[aá]lisis') {
                    $sheetIdsAnalisis += "sheet$sheetId"
                    Write-Host ("   📋 Hoja detectada: '{0}' (sheet{1})" -f $sheetName, $sheetId) -ForegroundColor Yellow
                }
            }
        }

        if ($sheetIdsAnalisis.Count -eq 0) {
            Write-Host "  ⚠️ No hay hojas con 'Análisis' en este Excel" -ForegroundColor DarkYellow
            continue
        }

        # 2. MAPEAR sheet IDs a archivos físicos (sheet1.xml, sheet2.xml, etc.)
        $relsFile = "$tmpDir\xl\_rels\workbook.xml.rels"
        $sheetIdToFile = @{}
        
        if (Test-Path $relsFile) {
            $relsXml = [xml](Get-Content $relsFile -Raw -Encoding UTF8)
            foreach ($rel in $relsXml.Relationships.Relationship) {
                if ($rel.Type -match "worksheet") {
                    $target = $rel.Target -replace '^worksheets/', ''
                    $rId = $rel.Id
                    $sheetIdToFile[$rId] = $target
                }
            }
        }

        # 3. ENCONTRAR QUÉ ARCHIVOS FÍSICOS CORRESPONDEN A LAS HOJAS DE ANÁLISIS
        $archivosABuscar = @()
        if (Test-Path $workbookFile) {
            $wbXml = [xml](Get-Content $workbookFile -Raw -Encoding UTF8)
            foreach ($s in $wbXml.workbook.sheets.sheet) {
                $sheetId = "sheet" + $s.sheetId
                if ($sheetIdsAnalisis -contains $sheetId) {
                    $rId = $s.'r:id'
                    if ($sheetIdToFile.ContainsKey($rId)) {
                        $archivoFisico = "$tmpDir\xl\worksheets\" + $sheetIdToFile[$rId]
                        $archivosABuscar += @{
                            Archivo = $archivoFisico
                            Nombre = $sheetNames[$sheetId]
                        }
                    }
                }
            }
        }

        # 4. BUSCAR EN LOS ARCHIVOS SELECCIONADOS
        $hitsArchivo = 0
        foreach ($item in $archivosABuscar) {
            $archivo = $item.Archivo
            $nombreHoja = $item.Nombre
            
            if (-not (Test-Path $archivo)) { 
                Write-Host ("  ⚠️ No se encontró archivo físico para hoja: {0}" -f $nombreHoja) -ForegroundColor DarkYellow
                continue 
            }

            Write-Host ("   🔍 Buscando en hoja: '{0}'" -f $nombreHoja) -ForegroundColor Cyan

            # BÚSQUEDA ULTRA-RÁPIDA: Regex directo en contenido RAW
            $contenido = Get-Content $archivo -Raw -Encoding UTF8
            
            # Extraer TODO el texto entre tags
            $matches = [regex]::Matches($contenido, '>([^<]+)<')
            
            foreach ($m in $matches) {
                $texto = $m.Groups[1].Value
                if ([string]::IsNullOrWhiteSpace($texto)) { continue }
                
                $textoNorm = Normalize $texto
                if ($textoNorm -match $pattern) {
                    $totalEncontrados++
                    $hitsArchivo++
                    
                    Write-Host ("      ✅ [{0}]: {1}" -f $nombreHoja, $texto) -ForegroundColor Green
                    
                    $detalles += [PSCustomObject]@{
                        N       = $totalEncontrados
                        Fichero = $path
                        Hoja    = $nombreHoja
                        Valor   = $texto
                    }
                }
            }
        }

        if ($hitsArchivo -eq 0) {
            Write-Host "  ⚪ Sin coincidencias" -ForegroundColor DarkGray
        } else {
            Write-Host ("  ✅ {0} coincidencias encontradas" -f $hitsArchivo) -ForegroundColor Green
        }

    } catch {
        $msg = $_.Exception.Message
        if ($msg -match "password|proteg|contrase") {
            Write-Host "  - Protegido con contraseña, omitido." -ForegroundColor DarkYellow
        } else {
            Write-Host ("  - Error: {0}" -f $msg) -ForegroundColor DarkYellow
        }
    } finally {
        if ($tmpDir -and (Test-Path $tmpDir)) {
            Remove-Item -Path $tmpDir -Recurse -Force -ErrorAction SilentlyContinue
        }
    }
}

# ========== RESUMEN ==========
$fin = Get-Date
$dur = New-TimeSpan -Start $inicio -End $fin

Write-Host ""
Write-Host "==============================================" -ForegroundColor DarkCyan
Write-Host ("RESUMEN FINAL") -ForegroundColor Cyan
Write-Host ("  Excels analizados     : {0}" -f $blueprints.Count)
Write-Host ("  Coincidencias totales : {0}" -f $totalEncontrados)
Write-Host ("  Tiempo total          : {0} min {1:D2} s" -f $dur.Minutes, $dur.Seconds)
Write-Host "==============================================" -ForegroundColor DarkCyan

if ($detalles.Count -gt 0) {
    Write-Host ""
    Write-Host "#   | Fichero | Hoja | Texto" -ForegroundColor White
    Write-Host "-------------------------------------------------------------"
    foreach ($d in $detalles) {
        $num = "{0,3}" -f $d.N
        $fila = ("{0} | {1} | {2} | " -f $num, (Split-Path $d.Fichero -Leaf), $d.Hoja)
        Write-Host -NoNewline $fila -ForegroundColor Gray
        Highlight $d.Valor $pattern
    }
} else {
    Write-Host "No se encontraron coincidencias." -ForegroundColor Gray
}

Write-Host "`n✔️ Proceso completado (OpenXML - Método RÁPIDO)" -ForegroundColor Green



