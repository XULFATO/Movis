# ===========================================
# Buscar-Blueprints.ps1 (versi√≥n robusta b√∫squeda literal)
# ===========================================

$ErrorActionPreference = 'Stop'

function Ask-YesNo($prompt) {
    while ($true) {
        $r = Read-Host "$prompt (S/N)"
        if ($r -match '^[sS]$') { return $true }
        if ($r -match '^[nN]$') { return $false }
    }
}

Write-Host "üîç B√∫squeda de literales en hoja 'An√°lisis Conceptos' de ficheros 'Blueprint'..." -ForegroundColor Cyan

$basePath = Read-Host "üìÇ Introduce la ruta base (p.ej. R:\Proyectos)"
if (-not (Test-Path $basePath)) { Write-Host "‚ùå Ruta no v√°lida."; exit }

$sheetName = "An√°lisis Conceptos"

# Literales
$literals = @()
for ($i=1; $i -le 10; $i++) {
    $lit = Read-Host ("Literal #{0}" -f $i)
    if ([string]::IsNullOrWhiteSpace($lit)) { break }
    $literals += $lit
}
if ($literals.Count -eq 0) { Write-Host "‚ùå Sin literales."; exit }

$stopAtFirst = Ask-YesNo "¬øParar al encontrar la primera coincidencia?"

# --- patrones de carpetas ---
$regexDocImpl = '(?i)(^\s*\d{0,3}\s*[-_. ]*\s*documentaci[o√≥]n\s+implantaci[o√≥]n\b)|(\bdocumentaci[o√≥]n\s+implantaci[o√≥]n\b)'
$regexAnalisis = '(?i)(^\s*\d{0,3}\s*[-_. ]*\s*an[a√°]lisis\b)|(\ban[a√°]lisis\b)'

Write-Host "`nüìÅ Recorriendo estructura..." -ForegroundColor DarkCyan
$files = @()
Get-ChildItem -Path $basePath -Directory |
 Where-Object { $_.Name.Length -ge 4 -and $_.Name[3] -eq '_' } |
 Sort-Object LastWriteTime -Descending |
 ForEach-Object {
    Get-ChildItem -Path $_.FullName -Directory -ErrorAction SilentlyContinue | ForEach-Object {
        Get-ChildItem -Path $_.FullName -Directory -ErrorAction SilentlyContinue |
        Where-Object { $_.Name -match $regexDocImpl } | ForEach-Object {
            Get-ChildItem -Path $_.FullName -Directory -ErrorAction SilentlyContinue |
            Where-Object { $_.Name -match $regexAnalisis } | ForEach-Object {
                $found = Get-ChildItem -Path $_.FullName -File -Filter '*Blueprint*.xls*' -ErrorAction SilentlyContinue |
                         Where-Object { $_.Name -notlike '~$*' }
                if ($found) { $files += $found }
            }
        }
    }
}

if ($files.Count -eq 0) { Write-Host "‚ö†Ô∏è Ning√∫n Blueprint encontrado."; exit }

# --- b√∫squeda ---
$excel = New-Object -ComObject Excel.Application
$excel.Visible = $false
$excel.DisplayAlerts = $false
$results = New-Object System.Collections.Generic.List[object]

foreach ($file in $files) {
    foreach ($lit in $literals) {
        $wb = $null
        try {
            $wb = $excel.Workbooks.Open($file.FullName, 0, $true)
            $sheet = $null
            foreach ($sh in $wb.Worksheets) { if ($sh.Name -eq $sheetName) { $sheet = $sh; break } }
            if (-not $sheet) { continue }

            $used = $sheet.UsedRange
            $rows = $used.Rows.Count
            $cols = $used.Columns.Count

            for ($r=1; $r -le $rows; $r++) {
                for ($c=1; $c -le $cols; $c++) {
                    $val = $used.Cells.Item($r,$c).Text
                    if ([string]::IsNullOrWhiteSpace($val)) { continue }

                    $valNorm = ($val -replace '\s+', ' ').Trim()
                    $litNorm = ($lit -replace '\s+', ' ').Trim()

                    if ($valNorm -imatch [regex]::Escape($litNorm)) {
                        $tipo = if ($valNorm -ieq $litNorm) { "Exacta" } else { "Parcial" }
                        $results.Add([PSCustomObject]@{
                            Fichero = $file.FullName
                            Hoja    = $sheetName
                            Literal = $lit
                            Celda   = "$r,$c"
                            Tipo    = $tipo
                        })
                        Write-Host "‚úÖ [$lit] en $($file.Name) celda $r,$c ($tipo)" -ForegroundColor Green
                        if ($stopAtFirst) { throw "STOP_GLOBAL" }
                    }
                }
            }

        } catch {
            if ($_.Exception.Message -eq "STOP_GLOBAL") { throw }
            Write-Host ("‚ö†Ô∏è Error con {0}" -f $file.FullName) -ForegroundColor DarkYellow
        } finally {
            if ($wb) { $wb.Close($false) | Out-Null }
        }
    }
}

# --- exportar ---
$outPath = Join-Path $env:USERPROFILE "Desktop\Resultados_Blueprint.xlsx"
$wbOut = $excel.Workbooks.Add()
$wsOut = $wbOut.Sheets.Item(1)
$wsOut.Name = "Resultados"
$wsOut.Cells.Item(1,1)="Fichero"
$wsOut.Cells.Item(1,2)="Hoja"
$wsOut.Cells.Item(1,3)="Literal"
$wsOut.Cells.Item(1,4)="Celda"
$wsOut.Cells.Item(1,5)="Tipo coincidencia"
$row=2
foreach($r in $results){
 $wsOut.Cells.Item($row,1)=$r.Fichero
 $wsOut.Cells.Item($row,2)=$r.Hoja
 $wsOut.Cells.Item($row,3)=$r.Literal
 $wsOut.Cells.Item($row,4)=$r.Celda
 $wsOut.Cells.Item($row,5)=$r.Tipo
 $row++
}
$wsOut.Range("A1:E$($row-1)").EntireColumn.AutoFit()|Out-Null
$wbOut.SaveAs($outPath)
$wbOut.Close($false)
$excel.Quit()
[System.Runtime.InteropServices.Marshal]::ReleaseComObject($excel)|Out-Null
Write-Host "`n‚úÖ Finalizado. Archivo: $outPath" -ForegroundColor Cyan