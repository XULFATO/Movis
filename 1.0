# ==========================================================
# Buscar literales en Blueprints (.xlsx) sin abrir Excel (OpenXML completo)
# ==========================================================
$ErrorActionPreference = "Stop"

# -------- LISTADO INTERNO DE RUTAS (modo 2 y modo 4) --------
$rutasOrigen = @(
    "O:\ADP_SP\Clientes_Bob_LOPD\J18_ANCERT\01. Documentaci√≥n Implantaci√≥n\03.-ANALISIS",
    "O:\ADP_SP\Clientes_Bob_LOPD\J20_TROPICAL_PARTNERS\01. Documentaci√≥n Implantaci√≥n\03.-ANALISIS"
)

# -------- FUNCIONES AUXILIARES --------
function Remove-Diacritics([string]$s) {
    if ([string]::IsNullOrWhiteSpace($s)) { return "" }
    $d = $s.Normalize([Text.NormalizationForm]::FormD)
    ($d.ToCharArray() | Where-Object {
        [Globalization.CharUnicodeInfo]::GetUnicodeCategory($_) -ne [Globalization.UnicodeCategory]::NonSpacingMark
    }) -join ''
}
function Normalize([string]$s) { (Remove-Diacritics $s).ToLowerInvariant().Trim() -replace '\\', '/' }

function Select-Mode {
    Write-Host "`nüü¶ MODO DE B√öSQUEDA" -ForegroundColor Cyan
    Write-Host "1Ô∏è‚É£  Escanear autom√°ticamente toda la estructura"
    Write-Host "2Ô∏è‚É£  Usar listado interno (`$rutasOrigen`)"
    Write-Host "3Ô∏è‚É£  Escanear filtrando solo carpetas que contengan un texto"
    Write-Host "4Ô∏è‚É£  Detectar Blueprints NO contemplados en `$rutasOrigen`"
    $r = Read-Host "Elige modo (1, 2, 3 o 4)"
    switch ($r) { '2' {2} '3' {3} '4' {4} default {1} }
}

function Highlight {
    param([string]$text,[string]$pattern)
    if ([string]::IsNullOrWhiteSpace($text)) { return }
    $regex = [regex]::new($pattern,[System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
    $lastIndex=0
    $matches=$regex.Matches($text)
    if($matches.Count -eq 0){Write-Host $text -ForegroundColor Gray;return}
    foreach($m in $matches){
        if($m.Index -gt $lastIndex){
            $seg=$text.Substring($lastIndex,$m.Index-$lastIndex)
            Write-Host -NoNewline $seg -ForegroundColor Gray
        }
        Write-Host -NoNewline $m.Value -ForegroundColor Yellow
        $lastIndex=$m.Index+$m.Length
    }
    if($lastIndex -lt $text.Length){
        Write-Host -NoNewline $text.Substring($lastIndex) -ForegroundColor Gray
    }
    Write-Host ""
}

# -------- ENTRADA --------
Write-Host "üîç B√∫squeda r√°pida en Blueprints (.xlsx) ‚Üí hoja 'An√°lisis conceptos'" -ForegroundColor Cyan
$mode = Select-Mode

if ($mode -ne 4) {
    Write-Host "`n‚úèÔ∏è  Introduce hasta 10 literales (uno por l√≠nea). Deja vac√≠o para terminar." -ForegroundColor Yellow
    $literals = @()
    for ($i = 1; $i -le 10; $i++) {
        $lit = Read-Host ("Literal #{0}" -f $i)
        if ([string]::IsNullOrWhiteSpace($lit)) { break }
        $literals += $lit
    }
    if ($literals.Count -eq 0) { 
        Write-Host "‚ùå No se introdujo ning√∫n literal. Saliendo." -ForegroundColor Red
        exit 
    }

    $pattern = "(?i)" + (($literals | ForEach-Object { [regex]::Escape((Normalize $_)) }) -join "|")
}

$reDoc = '(?i)(documentaci[o√≥]n\s+implantaci[o√≥]n)'
$reAna = '(?i)(an[a√°]lisis)'

# -------- LOCALIZAR BLUEPRINTS --------
$blueprints = @()

if ($mode -eq 1 -or $mode -eq 3 -or $mode -eq 4) {
    $basePath = Read-Host "üìÇ Introduce la ruta base (p.ej. O:\ADP_SP)"
    if (-not (Test-Path $basePath)) { 
        Write-Host "‚ùå Ruta no v√°lida." -ForegroundColor Red
        exit 
    }

    $filtro = ""
    if ($mode -eq 3) {
        $filtro = Read-Host "üî§ Texto que deben contener las carpetas (p. ej. _23_ o _BKT_)"
        if ([string]::IsNullOrWhiteSpace($filtro)) { $filtro = "" }
    }

    Write-Host "`nüìÅ Escaneando carpetas..." -ForegroundColor DarkCyan
    $carpetas = Get-ChildItem -Path $basePath -Directory -ErrorAction SilentlyContinue |
                Where-Object { $_.Name.Length -ge 4 -and $_.Name[3] -eq '_' } |
                Sort-Object LastWriteTime -Descending
    
    if ($filtro -ne "") {
        $carpetas = $carpetas | Where-Object { $_.Name -match [regex]::Escape($filtro) }
        Write-Host ("üîé Aplicado filtro: '{0}' ‚Üí {1} carpetas" -f $filtro, $carpetas.Count) -ForegroundColor Yellow
    }

    foreach ($dir1 in $carpetas) {
        Write-Host ("‚Üí Carpeta principal: {0}" -f $dir1.Name) -ForegroundColor Yellow
        Get-ChildItem -Path $dir1.FullName -Directory -ErrorAction SilentlyContinue | ForEach-Object {
            $dir2 = $_
            $docDirs = Get-ChildItem -Path $dir2.FullName -Directory -ErrorAction SilentlyContinue |
                       Where-Object { $_.Name -match $reDoc }
            foreach ($doc in $docDirs) {
                $anaDirs = Get-ChildItem -Path $doc.FullName -Directory -ErrorAction SilentlyContinue |
                           Where-Object { $_.Name -match $reAna }
                foreach ($ana in $anaDirs) {
                    Write-Host ("   üìÇ Subcarpeta An√°lisis: {0}" -f $ana.FullName) -ForegroundColor Cyan
                    $found = Get-ChildItem -Path $ana.FullName -Recurse -File -ErrorAction SilentlyContinue |
                             Where-Object { $_.Name -notlike '~$*' -and $_.Name -match '(?i)Blueprint.*\.xlsx$' }
                    foreach ($f in $found) {
                        Write-Host ("      ‚úÖ Blueprint: {0}" -f $f.FullName) -ForegroundColor Green
                        $blueprints += $f.FullName
                    }
                }
            }
        }
    }
}
elseif ($mode -eq 2) {
    Write-Host "`nüìÑ Usando listado interno de rutas..." -ForegroundColor DarkCyan
    foreach ($ruta in $rutasOrigen) {
        if (-not (Test-Path $ruta)) { 
            Write-Host "‚ö†Ô∏è Ruta no encontrada: $ruta" -ForegroundColor DarkYellow
            continue 
        }
        $found = Get-ChildItem -Path $ruta -Recurse -File -ErrorAction SilentlyContinue |
                 Where-Object { $_.Name -notlike '~$*' -and $_.Name -match '(?i)Blueprint.*\.xlsx$' }
        foreach ($f in $found) {
            Write-Host ("      ‚úÖ Blueprint: {0}" -f $f.FullName) -ForegroundColor Green
            $blueprints += $f.FullName
        }
    }
}

if ($blueprints.Count -eq 0) { 
    Write-Host "‚ö†Ô∏è No se encontraron Blueprints." -ForegroundColor DarkYellow
    exit 
}

# -------- MODO 4: DETECTAR NO CONTEMPLADOS --------
if ($mode -eq 4) {
    Write-Host "`nüîé Comparando con la lista interna..." -ForegroundColor Cyan
    $rutasNormalizadas = $rutasOrigen | ForEach-Object { Normalize $_ }
    $noContemplados = $blueprints | Where-Object {
        $bp = Normalize $_
        -not ($rutasNormalizadas | Where-Object { $bp -like "$_*" })
    }
    if ($noContemplados.Count -gt 0) {
        Write-Host ("‚ùó Se encontraron {0} Blueprints no contemplados:" -f $noContemplados.Count) -ForegroundColor Red
        $noContemplados | ForEach-Object { Write-Host " ‚ûï $_" -ForegroundColor Red }
    } else {
        Write-Host "‚úÖ Todos los Blueprints est√°n contemplados." -ForegroundColor Green
    }
    exit
}

# -------- ANALIZAR CON OPENXML --------
$totalEncontrados = 0
$totalBlueprintsOK = 0
$detalles = @()
$inicio = Get-Date
Add-Type -AssemblyName System.IO.Compression.FileSystem

foreach ($path in $blueprints) {
    Write-Host ("`nüîπ Analizando: {0}" -f $path) -ForegroundColor DarkCyan
    try {
        $tmpDir = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), [System.IO.Path]::GetRandomFileName())
        [System.IO.Compression.ZipFile]::ExtractToDirectory($path, $tmpDir)

        # Leer sharedStrings.xml (diccionario de texto)
        $sharedFile = "$tmpDir\xl\sharedStrings.xml"
        $sharedStrings = @()
        if (Test-Path $sharedFile) {
            $xml = [xml](Get-Content $sharedFile -Raw)
            $sharedStrings = $xml.sst.si | ForEach-Object { ($_."t" | Out-String).Trim() }
        }

        $sheetFiles = Get-ChildItem "$tmpDir\xl\worksheets" -File -ErrorAction SilentlyContinue
        $sheetNamesFile = "$tmpDir\xl\workbook.xml"
        $sheetNames = @{}
        if (Test-Path $sheetNamesFile) {
            $xml = [xml](Get-Content $sheetNamesFile -Raw)
            foreach ($s in $xml.workbook.sheets.sheet) {
                $sheetNames["sheet" + $s.sheetId] = $s.name
            }
        }

        foreach ($sheet in $sheetFiles) {
            $xml = [xml](Get-Content $sheet.FullName -Raw)
            $sheetName = (Split-Path $sheet.Name -LeafBase)
            $displayName = if ($sheetNames.ContainsKey($sheetName)) { $sheetNames[$sheetName] } else { $sheet.Name }

            if ($displayName -match '(?i)an[a√°]lisis' -and $displayName -match '(?i)concept') {
                foreach ($c in $xml.worksheet.sheetData.row.c) {
                    $val = ""
                    if ($c.t -eq "s") { $val = $sharedStrings[[int]$c.v] }
                    else { $val = $c.v }
                    if ([string]::IsNullOrWhiteSpace($val)) { continue }
                    $valNorm = Normalize $val
                    if ($valNorm -match $pattern) {
                        $totalEncontrados++
                        $detalles += [PSCustomObject]@{
                            N¬∫       = $totalEncontrados
                            Fichero  = $path
                            Hoja     = $displayName
                            Celda    = $c.r
                            Valor    = $val
                        }
                    }
                }
            }
        }

        Remove-Item -Path $tmpDir -Recurse -Force -ErrorAction SilentlyContinue
    } catch {
        Write-Host ("‚ö†Ô∏è Error en {0}: {1}" -f (Split-Path $path -Leaf), $_.Exception.Message) -ForegroundColor DarkYellow
    }
}

# -------- RESUMEN FINAL --------
$fin = Get-Date
$dur = New-TimeSpan -Start $inicio -End $fin
Write-Host "`n==============================================" -ForegroundColor DarkCyan
Write-Host ("üìä RESUMEN FINAL") -ForegroundColor Cyan
Write-Host ("   Blueprints analizados : {0}" -f $blueprints.Count)
Write-Host ("   Coincidencias totales : {0}" -f $totalEncontrados)
Write-Host ("   Tiempo total          : {0} min {1:D2} s" -f $dur.Minutes, $dur.Seconds)
Write-Host "==============================================" -ForegroundColor DarkCyan

if ($detalles.Count -gt 0) {
    Write-Host "`n#Ô∏è‚É£ N¬∫  | üìÑ Blueprint completo                                   | üßæ Hoja | üìç Celda | Texto encontrado" -ForegroundColor White
    Write-Host "------------------------------------------------------------------------------------------------------------"
    foreach ($d in $detalles) {
        $num = "{0,3}" -f $d.N¬∫
        Write-Host ("{0} | {1} | {2} | {3} | " -f $num, $d.Fichero, $d.Hoja, $d.Celda) -NoNewline -ForegroundColor Gray
        Highlight $d.Valor $pattern
    }
} else {
    Write-Host "`n‚ö™ No se encontraron coincidencias." -ForegroundColor Gray
}

Write-Host "`n‚úîÔ∏è Proceso completado (OpenXML sin Excel, versi√≥n optimizada)." -ForegroundColor Green